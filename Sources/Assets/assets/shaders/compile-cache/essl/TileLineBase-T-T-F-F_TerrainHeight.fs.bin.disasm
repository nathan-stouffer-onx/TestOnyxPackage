precision highp int;
precision highp float;
out mediump vec4 bgfx_FragData[8];
in vec3 v_bitangent;
in vec4 v_color0;
in vec4 v_color3;
in vec4 v_color4;
in float v_depth;
in vec4 v_texcoord0;
in vec4 v_texcoord1;
in vec4 v_texcoord2;
in vec4 v_texcoord3;
in vec4 v_texcoord5;
in vec4 v_texcoord7;
uniform sampler2D s_DashSampler;
uniform vec4 s_DashSampler_Res;
uniform vec4 u_time;
uniform vec4 u_TileFragClip;
uniform vec4 u_vectorFade;
void main ()
{
  float widthExpansion_1;
  float tmpvar_2;
  tmpvar_2 = (float((u_TileFragClip.x <= v_texcoord7.x)) * float((v_texcoord7.x <= u_TileFragClip.z)));
  float tmpvar_3;
  tmpvar_3 = (float((u_TileFragClip.y <= v_texcoord7.y)) * float((v_texcoord7.y <= u_TileFragClip.w)));
  if (((tmpvar_2 * tmpvar_3) == 0.0)) {
    discard;
  };
  float tmpvar_4;
  tmpvar_4 = (v_depth + (0.5 * (1.0/(s_DashSampler_Res.xy)).y));
  vec2 tmpvar_5;
  tmpvar_5.x = -(v_texcoord2.y);
  tmpvar_5.y = v_texcoord2.x;
  vec2 tmpvar_6;
  tmpvar_6.x = -(v_texcoord2.w);
  tmpvar_6.y = v_texcoord2.z;
  float tmpvar_7;
  tmpvar_7 = (-(sign(
    dot (tmpvar_5, v_bitangent.xy)
  )) * dot (normalize(
    (v_texcoord5.xy - v_texcoord0.xy)
  ), tmpvar_5));
  float tmpvar_8;
  tmpvar_8 = (sign(dot (tmpvar_6, 
    -(v_bitangent.xy)
  )) * dot (normalize(
    (v_texcoord5.xy - v_texcoord0.zw)
  ), tmpvar_6));
  float tmpvar_9;
  tmpvar_9 = abs(v_texcoord2.x);
  bool tmpvar_10;
  if ((((tmpvar_7 * tmpvar_9) > 0.0) && (v_color3.x > -9999.0))) {
    tmpvar_10 = bool(1);
  } else {
    tmpvar_10 = (((tmpvar_8 * 
      abs(v_texcoord2.z)
    ) < 0.0) && (v_color3.y > -9999.0));
  };
  if (tmpvar_10) {
    discard;
  };
  vec2 tmpvar_11;
  tmpvar_11.y = 0.0;
  tmpvar_11.x = v_texcoord3.z;
  widthExpansion_1 = (((
    (max (v_texcoord1.x, v_texcoord1.y) + v_texcoord1.z)
   + v_texcoord1.w) + 2.0) / 2.0);
  vec2 tmpvar_12;
  float tmpvar_13;
  tmpvar_13 = (v_texcoord1.x * 0.5);
  tmpvar_12.x = (tmpvar_13 / widthExpansion_1);
  tmpvar_12.y = (tmpvar_13 / widthExpansion_1);
  vec2 unit_14;
  float tmpvar_15;
  tmpvar_15 = min (tmpvar_12.y, 0.0);
  vec2 tmpvar_16;
  tmpvar_16 = (tmpvar_11 * 0.5);
  float tmpvar_17;
  tmpvar_17 = sqrt(dot (tmpvar_11, tmpvar_11));
  unit_14 = (tmpvar_11 / tmpvar_17);
  if ((tmpvar_17 < 0.0001)) {
    unit_14 = vec2(1.0, 0.0);
  };
  float tmpvar_18;
  tmpvar_18 = dot (unit_14, (v_texcoord3.yx - tmpvar_16));
  float tmpvar_19;
  tmpvar_19 = ((abs(
    dot ((unit_14.yx * vec2(-1.0, 1.0)), (v_texcoord3.yx - tmpvar_16))
  ) - tmpvar_12.y) + tmpvar_15);
  float tmpvar_20;
  tmpvar_20 = (((
    abs(tmpvar_18)
   - 
    (tmpvar_17 * 0.5)
  ) - tmpvar_12.x) + tmpvar_15);
  vec2 tmpvar_21;
  tmpvar_21.x = max (0.0, tmpvar_20);
  tmpvar_21.y = max (0.0, tmpvar_19);
  float tmpvar_22;
  tmpvar_22 = (2.0 * tmpvar_12.y);
  vec2 x_23;
  x_23 = -(v_texcoord3.yx);
  vec2 x_24;
  x_24 = (tmpvar_11 - v_texcoord3.yx);
  float tmpvar_25;
  tmpvar_25 = mix (max (min (
    (sqrt(dot (tmpvar_21, tmpvar_21)) - tmpvar_15)
  , 
    max (tmpvar_20, tmpvar_19)
  ), (
    (((abs(
      (fract(((
        (tmpvar_18 / tmpvar_22)
       * 0.5) + 0.5)) - 0.5)
    ) * 2.0) - 0.5) * tmpvar_22)
   - 10000.0)), min ((
    sqrt(dot (x_23, x_23))
   - tmpvar_12.y), (
    sqrt(dot (x_24, x_24))
   - tmpvar_12.y)), (max (0.0, 
    -(sign(v_texcoord3.y))
  ) + max (0.0, 
    sign((v_texcoord3.y - v_texcoord3.z))
  )));
  vec2 tmpvar_26;
  tmpvar_26.x = dFdx(tmpvar_25);
  tmpvar_26.y = dFdy(tmpvar_25);
  float tmpvar_27;
  tmpvar_27 = clamp ((0.5 - (tmpvar_25 / 
    sqrt(dot (tmpvar_26, tmpvar_26))
  )), 0.0, 1.0);
  vec2 tmpvar_28;
  float tmpvar_29;
  tmpvar_29 = max (v_texcoord1.x, v_texcoord1.y);
  tmpvar_28.x = (((
    (tmpvar_29 + v_texcoord1.z)
   + v_texcoord1.w) * 0.5) / widthExpansion_1);
  tmpvar_28.y = (((
    (tmpvar_29 + v_texcoord1.z)
   + v_texcoord1.w) * 0.5) / widthExpansion_1);
  float tmpvar_30;
  float outlineThick_31;
  outlineThick_31 = ((v_texcoord1.w * 0.5) / widthExpansion_1);
  vec2 unit_32;
  float tmpvar_33;
  tmpvar_33 = min (tmpvar_28.y, 0.0);
  vec2 tmpvar_34;
  tmpvar_34 = (tmpvar_11 * 0.5);
  float tmpvar_35;
  tmpvar_35 = sqrt(dot (tmpvar_11, tmpvar_11));
  unit_32 = (tmpvar_11 / tmpvar_35);
  if ((tmpvar_35 < 0.0001)) {
    unit_32 = vec2(1.0, 0.0);
  };
  float tmpvar_36;
  tmpvar_36 = dot (unit_32, (v_texcoord3.yx - tmpvar_34));
  float tmpvar_37;
  tmpvar_37 = ((abs(
    dot ((unit_32.yx * vec2(-1.0, 1.0)), (v_texcoord3.yx - tmpvar_34))
  ) - tmpvar_28.y) + tmpvar_33);
  float tmpvar_38;
  tmpvar_38 = (((
    abs(tmpvar_36)
   - 
    (tmpvar_35 * 0.5)
  ) - tmpvar_28.x) + tmpvar_33);
  vec2 tmpvar_39;
  tmpvar_39.x = max (0.0, tmpvar_38);
  tmpvar_39.y = max (0.0, tmpvar_37);
  float tmpvar_40;
  tmpvar_40 = (2.0 * tmpvar_28.y);
  vec2 x_41;
  x_41 = -(v_texcoord3.yx);
  vec2 x_42;
  x_42 = (tmpvar_11 - v_texcoord3.yx);
  float tmpvar_43;
  tmpvar_43 = (abs((
    mix (max (min ((
      sqrt(dot (tmpvar_39, tmpvar_39))
     - tmpvar_33), max (tmpvar_38, tmpvar_37)), ((
      ((abs((
        fract((((tmpvar_36 / tmpvar_40) * 0.5) + 0.5))
       - 0.5)) * 2.0) - 0.5)
     * tmpvar_40) - 10000.0)), min ((sqrt(
      dot (x_41, x_41)
    ) - tmpvar_28.y), (sqrt(
      dot (x_42, x_42)
    ) - tmpvar_28.y)), (max (0.0, -(
      sign(v_texcoord3.y)
    )) + max (0.0, sign(
      (v_texcoord3.y - v_texcoord3.z)
    ))))
   + 
    (outlineThick_31 * 0.5)
  )) - (outlineThick_31 * 0.5));
  vec2 tmpvar_44;
  tmpvar_44.x = dFdx(tmpvar_43);
  tmpvar_44.y = dFdy(tmpvar_43);
  tmpvar_30 = (clamp ((0.5 - 
    (tmpvar_43 / sqrt(dot (tmpvar_44, tmpvar_44)))
  ), 0.0, 1.0) * abs(sign(outlineThick_31)));
  vec2 tmpvar_45;
  float tmpvar_46;
  tmpvar_46 = (v_texcoord1.y * 0.5);
  tmpvar_45.x = (tmpvar_46 / widthExpansion_1);
  tmpvar_45.y = (tmpvar_46 / widthExpansion_1);
  vec2 tmpvar_47;
  tmpvar_47.x = 0.0;
  tmpvar_47.y = tmpvar_4;
  vec2 x_48;
  x_48 = (v_texcoord0.xy - v_texcoord0.zw);
  vec2 tmpvar_49;
  tmpvar_49.x = (((float(mod (
    ((((v_color4.x * 
      (sqrt(dot (x_48, x_48)) / (v_color4.y - v_color4.x))
    ) + (v_texcoord3.y * tmpvar_45.y)) / tmpvar_45.y) + (u_time.x / 500.0))
  , 
    floor(((texture (s_DashSampler, tmpvar_47).x * (s_DashSampler_Res.x - 1.0)) + 0.5))
  ))) + 1.0) / s_DashSampler_Res.x);
  tmpvar_49.y = tmpvar_4;
  vec4 tmpvar_50;
  tmpvar_50 = texture (s_DashSampler, tmpvar_49);
  vec2 unit_51;
  float tmpvar_52;
  tmpvar_52 = min (tmpvar_45.y, 0.0);
  vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_11 * 0.5);
  float tmpvar_54;
  tmpvar_54 = sqrt(dot (tmpvar_11, tmpvar_11));
  unit_51 = (tmpvar_11 / tmpvar_54);
  if ((tmpvar_54 < 0.0001)) {
    unit_51 = vec2(1.0, 0.0);
  };
  float tmpvar_55;
  tmpvar_55 = dot (unit_51, (v_texcoord3.yx - tmpvar_53));
  float tmpvar_56;
  tmpvar_56 = ((abs(
    dot ((unit_51.yx * vec2(-1.0, 1.0)), (v_texcoord3.yx - tmpvar_53))
  ) - tmpvar_45.y) + tmpvar_52);
  float tmpvar_57;
  tmpvar_57 = (((
    abs(tmpvar_55)
   - 
    (tmpvar_54 * 0.5)
  ) - tmpvar_45.x) + tmpvar_52);
  vec2 tmpvar_58;
  tmpvar_58.x = max (0.0, tmpvar_57);
  tmpvar_58.y = max (0.0, tmpvar_56);
  float tmpvar_59;
  tmpvar_59 = (2.0 * tmpvar_45.y);
  vec2 x_60;
  x_60 = -(v_texcoord3.yx);
  vec2 x_61;
  x_61 = (tmpvar_11 - v_texcoord3.yx);
  float tmpvar_62;
  tmpvar_62 = min (max ((
    -((mix (max (
      min ((sqrt(dot (tmpvar_58, tmpvar_58)) - tmpvar_52), max (tmpvar_57, tmpvar_56))
    , 
      ((((
        abs((fract((
          ((tmpvar_55 / tmpvar_59) * 0.5)
         + 0.5)) - 0.5))
       * 2.0) - 0.5) * tmpvar_59) - 10000.0)
    ), min (
      (sqrt(dot (x_60, x_60)) - tmpvar_45.y)
    , 
      (sqrt(dot (x_61, x_61)) - tmpvar_45.y)
    ), (
      max (0.0, -(sign(v_texcoord3.y)))
     + 
      max (0.0, sign((v_texcoord3.y - v_texcoord3.z)))
    )) * tmpvar_50.x))
   / 0.01), 0.0), 1.0);
  float tmpvar_63;
  tmpvar_63 = min (max ((
    (tmpvar_62 + tmpvar_27)
   + tmpvar_30), 0.0), 1.0);
  vec4 tmpvar_64;
  tmpvar_64.xyz = mix (mix (v_color0.xyz, (tmpvar_62 * vec3(1.0, 0.0, 0.0)), tmpvar_62), vec3(0.0, 0.0, 1.0), tmpvar_30);
  tmpvar_64.w = tmpvar_63;
  mediump vec4 tmpvar_65;
  tmpvar_65.xyz = tmpvar_64.xyz;
  tmpvar_65.w = ((tmpvar_63 * v_color0.w) * u_vectorFade.x);
  bgfx_FragData[0] = tmpvar_65;
  bgfx_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
}

