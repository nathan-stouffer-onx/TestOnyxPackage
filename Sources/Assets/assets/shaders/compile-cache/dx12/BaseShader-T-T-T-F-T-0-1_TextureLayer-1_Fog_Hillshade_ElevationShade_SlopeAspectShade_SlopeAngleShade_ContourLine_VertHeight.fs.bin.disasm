//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xy  
// TEXCOORD                 4   xyzw        4     NONE   float   x   
// TEXCOORD                 5   xyzw        5     NONE   float   xy  
// TEXCOORD                 6   xyzw        6     NONE   float     zw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[20], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.x
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.zw
dcl_input_ps linear v7.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 7
add r0.x, -cb0[10].x, cb0[10].y
ne r0.y, cb0[10].y, cb0[10].x
movc r0.z, r0.y, l(-1.000000), l(-0.000000)
and r0.y, r0.y, l(0x3f800000)
mad r0.x, r0.y, r0.x, r0.z
add r0.x, r0.x, l(1.000000)
add r0.z, v7.w, -cb0[10].x
div r0.x, r0.z, r0.x
mul r0.x, r0.x, r0.y
mul r0.x, r0.x, cb0[1].x
mul r0.x, r0.x, cb0[1].y
div r0.yz, r0.xxxx, cb0[1].xxyx
round_ni r1.yz, r0.yyzy
mad r1.x, -cb0[1].x, r1.y, r0.x
div r0.xy, r1.xzxx, cb0[1].xyxx
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0
mul r1.x, cb0[0].z, l(0.500000)
div r1.y, r1.x, v2.z
mov r1.xw, l(0,0,0,0)
add r2.xyzw, r1.yxxy, v5.xyxy
mad r3.xyzw, v2.zwzw, r2.xyzw, v2.xyxy
sample_l_indexable(texture2d)(float,float,float,float) r2.x, r3.xyxx, t3.xyzw, s3, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r3.zwzz, t3.yzxw, s3, l(0.000000)
add r3.x, -v3.x, v3.y
mad r2.yw, r2.yyyw, r3.xxxx, v3.xxxx
mul r2.x, r2.y, r2.x
mul r2.y, r2.w, r2.z
add r4.xyzw, -r1.yxxy, v5.xyxy
dp2 r5.z, r1.yyyy, cb0[2].xxxx
mad r6.xyzw, v2.zwzw, r4.xyzw, v2.xyxy
mad r1.xy, r4.ywyy, r3.xxxx, v3.xxxx
sample_l_indexable(texture2d)(float,float,float,float) r2.z, r6.xyxx, t3.yzxw, s3, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r2.w, r6.zwzz, t3.yzwx, s3, l(0.000000)
mad r5.y, r2.w, r1.y, -r2.y
mad r5.x, r2.z, r1.x, -r2.x
dp3 r1.x, r5.xyzx, r5.xyzx
rsq r1.x, r1.x
mul r2.xyz, r1.xxxx, r5.xyzx
max r1.x, |r2.x|, |r2.y|
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), r1.x
min r1.y, |r2.x|, |r2.y|
mul r1.x, r1.x, r1.y
mul r1.y, r1.x, r1.x
mad r2.w, r1.y, l(0.020835), l(-0.085133)
mad r2.w, r1.y, r2.w, l(0.180141)
mad r2.w, r1.y, r2.w, l(-0.330299)
mad r1.y, r1.y, r2.w, l(0.999866)
mul r2.w, r1.y, r1.x
mad r2.w, r2.w, l(-2.000000), l(1.570796)
lt r3.x, |r2.x|, |r2.y|
and r2.w, r2.w, r3.x
mad r1.x, r1.x, r1.y, r2.w
lt r3.xy, r2.xzxx, -r2.xzxx
and r1.y, r3.x, l(0xc0490fdb)
add r1.x, r1.y, r1.x
min r1.y, r2.x, -r2.y
lt r1.y, r1.y, -r1.y
max r2.w, r2.x, -r2.y
ge r2.w, r2.w, -r2.w
and r1.y, r1.y, r2.w
movc r1.x, r1.y, -r1.x, r1.x
add r1.x, r1.x, l(-1.570796)
lt r1.y, r1.x, l(0.000000)
and r1.y, r1.y, l(0x40c90fdb)
add r1.x, r1.y, r1.x
add r1.x, -r1.x, l(6.283185)
mul r1.y, r1.x, l(0.159168)
round_ni r1.y, r1.y
mad r1.x, -r1.y, l(6.282685), r1.x
mul r1.z, r1.x, l(0.159155)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.zwzz, t2.xyzw, s2
mul r4.xy, r2.xyxx, cb0[13].yyyy
mov r4.z, r2.z
dp3 r2.w, r4.xyzx, r4.xyzx
rsq r2.w, r2.w
mul r3.xzw, r2.wwww, r4.xxyz
dp3 r2.w, r3.xzwx, -cb0[11].xyzx
add r2.w, r2.w, l(1.000000)
mul r2.w, r2.w, l(0.500000)
add r3.x, -cb0[13].x, l(1.000000)
mad r2.w, r3.x, r2.w, cb0[13].x
mad r3.xz, v5.xxyx, cb0[16].zzwz, cb0[16].xxyx
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r3.xzxx, t4.xyzw, s4
mul r3.x, r5.w, cb0[17].x
add r4.xyw, r5.xyxz, -cb0[18].xyxz
max o0.w, r5.w, cb0[18].w
mad r3.xzw, r3.xxxx, r4.xxyw, cb0[18].xxyz
mad r4.xyw, r2.wwww, cb0[12].xyxz, -r3.xzxw
mad r3.xzw, cb0[12].wwww, r4.xxyw, r3.xxzw
add r1.xyz, r1.xyzx, -r3.xzwx
ge r2.w, cb0[9].x, |r2.z|
and r2.w, r2.w, l(0x3f800000)
mul r1.w, r1.w, r2.w
mad r1.xyz, r1.wwww, r1.xyzx, r3.xzwx
add r0.xyz, r0.xyzx, -r1.xyzx
mad r0.xyz, r0.wwww, r0.xyzx, r1.xyzx
mad r0.w, |r2.z|, l(-0.018729), l(0.074261)
mad r0.w, r0.w, |r2.z|, l(-0.212114)
mad r0.w, r0.w, |r2.z|, l(1.570729)
add r1.x, -|r2.z|, l(1.000000)
sqrt r1.x, r1.x
mul r1.y, r0.w, r1.x
mad r1.y, r1.y, l(-2.000000), l(3.141593)
and r1.y, r3.y, r1.y
mad r0.w, r0.w, r1.x, r1.y
mul r1.x, r0.w, l(0.636620)
mov r1.y, l(0)
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, r1.xyxx, t1.xyzw, s1
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, r1.wwww, r1.xyzx, r0.xyzx
add r1.xyz, -r0.xyzx, cb0[5].xyzx
dp4 r0.w, v7.xyzw, v7.xyzw
sqrt r0.w, r0.w
max r1.w, cb0[19].z, l(1.500000)
div r0.w, r1.w, r0.w
min r0.w, r0.w, l(1.000000)
mul r1.w, r0.w, cb0[4].w
mul r0.w, r0.w, cb0[6].w
min r2.w, r1.w, l(1.000000)
max r1.w, r1.w, l(1.500000)
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul r2.w, r2.w, cb0[5].w
mul r1.xyz, r1.xyzx, r2.wwww
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[4].x
mad r3.x, r2.w, v7.w, l(-0.500000)
mul r2.w, r2.w, v7.w
frc r3.x, r3.x
add r3.x, r3.x, l(-0.500000)
mul r1.w, r1.w, |r3.x|
mov r3.x, -r2.w
deriv_rtx_coarse r2.w, r2.w
deriv_rty_coarse r3.x, r3.x
add r2.w, |r2.w|, |r3.x|
div r1.w, r1.w, r2.w
min r1.w, r1.w, l(1.000000)
add r1.w, -r1.w, l(1.000000)
mad r2.w, -cb0[4].x, l(0.500000), cb0[4].y
ge r2.w, v7.w, r2.w
and r2.w, r2.w, l(0x3f800000)
mad r3.x, cb0[4].x, l(0.500000), cb0[4].z
ge r3.x, r3.x, v7.w
and r3.x, r3.x, l(0x3f800000)
mul r2.w, r2.w, r3.x
mad r1.w, r1.w, r2.w, l(0.500000)
mul r2.w, r1.w, r1.w
mad_sat r1.w, r1.w, r2.w, l(-0.500000)
dp3 r2.w, v7.xyzx, v7.xyzx
sqrt r2.w, r2.w
add r2.w, r2.w, -cb0[8].x
add r3.x, -cb0[8].x, cb0[8].y
div r3.x, l(1.000000, 1.000000, 1.000000, 1.000000), r3.x
mul_sat r2.w, r2.w, r3.x
mad r3.x, r2.w, l(-2.000000), l(3.000000)
mul r2.w, r2.w, r2.w
mad r2.w, -r3.x, r2.w, l(1.000000)
mul r1.w, r1.w, r2.w
mad r0.xyz, r1.wwww, r1.xyzx, r0.xyzx
add r1.xyz, -r0.xyzx, cb0[7].xyzx
min r1.w, r0.w, l(1.000000)
max r0.w, r0.w, l(1.500000)
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r1.w, r1.w, cb0[7].w
mul r1.xyz, r1.xyzx, r1.wwww
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[6].x
mad r3.x, r1.w, v7.w, l(-0.500000)
mul r1.w, r1.w, v7.w
frc r3.x, r3.x
add r3.x, r3.x, l(-0.500000)
mul r0.w, r0.w, |r3.x|
mov r3.x, -r1.w
deriv_rtx_coarse r1.w, r1.w
deriv_rty_coarse r3.x, r3.x
add r1.w, |r1.w|, |r3.x|
div r0.w, r0.w, r1.w
min r0.w, r0.w, l(1.000000)
add r0.w, -r0.w, l(1.000000)
mad r1.w, -cb0[6].x, l(0.500000), cb0[6].y
ge r1.w, v7.w, r1.w
and r1.w, r1.w, l(0x3f800000)
mad r3.x, cb0[6].x, l(0.500000), cb0[6].z
ge r3.x, r3.x, v7.w
and r3.x, r3.x, l(0x3f800000)
mul r1.w, r1.w, r3.x
mad r0.w, r0.w, r1.w, l(0.500000)
mul r1.w, r0.w, r0.w
mad_sat r0.w, r0.w, r1.w, l(-0.500000)
mul r0.w, r2.w, r0.w
mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
add r1.xyz, -r0.xyzx, cb0[15].xyzx
add r0.w, -cb0[14].x, cb0[14].y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
add r1.w, v4.x, -cb0[14].x
mul_sat r0.w, r0.w, r1.w
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
mul r0.w, r0.w, cb0[15].w
mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
dp3 r0.w, -v7.xyzx, -v7.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, -v7.xyzx
max r0.w, r1.z, l(0.000000)
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, l(0.700000)
max r3.z, r0.w, l(0.200000)
mul r3.xy, r1.yxyy, l(0.500000, -0.500000, 0.000000, 0.000000)
dp3 r0.w, r2.xyzx, r3.xyzx
mul r2.xyz, r2.xyzx, r0.wwww
max r0.w, r4.z, l(0.000000)
add r0.w, -r0.w, l(1.000000)
mad r0.w, r0.w, l(1.800000), l(0.100000)
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r3.xyzx
dp3 r1.w, r2.xyzx, r2.xyzx
rsq r1.w, r1.w
mul r2.xyz, r1.wwww, r2.xyzx
dp3_sat r1.x, r2.xyzx, r1.xyzx
log r1.x, r1.x
mul r1.x, r1.x, cb0[3].y
exp r1.x, r1.x
mul r1.x, r1.x, cb0[3].x
mul r0.w, r0.w, r1.x
add r1.x, -v7.z, l(-5.000000)
mul_sat r1.x, r1.x, l(0.010000)
mad o0.xyz, r0.wwww, r1.xxxx, r0.xyzx
div r0.x, v6.z, v6.w
mad r0.x, r0.x, l(0.500000), l(0.500000)
mul r0.y, r0.x, l(256.000000)
round_ni r0.y, r0.y
mad r0.x, r0.x, l(256.000000), -r0.y
mul o1.x, r0.y, l(0.003906)
mul r0.y, r0.x, l(256.000000)
round_ni r0.y, r0.y
mad r0.x, r0.x, l(256.000000), -r0.y
mul r0.x, r0.x, l(256.000000)
round_ni r0.x, r0.x
mul o1.yz, r0.yyxy, l(0.000000, 0.003906, 0.003906, 0.000000)
mov o1.w, l(1.000000)
ret 
// Approximately 0 instruction slots used
 