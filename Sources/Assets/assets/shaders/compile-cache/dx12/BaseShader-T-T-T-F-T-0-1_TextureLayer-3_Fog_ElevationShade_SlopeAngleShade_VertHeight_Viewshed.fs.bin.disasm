//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float       
// NORMAL                   0   xyz         1     NONE   float       
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xy  
// TEXCOORD                 4   xyzw        4     NONE   float   x   
// TEXCOORD                 5   xyzw        5     NONE   float   xy  
// TEXCOORD                 6   xyzw        6     NONE   float     zw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
// SV_TARGET                1   xyzw        1   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[21], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.x
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.zw
dcl_input_ps linear v7.xyzw
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_temps 7
add r0.xyz, v7.xyzx, -cb0[4].xyzx
dp3 r1.x, r0.xyzx, r0.xyzx
sqrt r1.x, r1.x
mul r1.y, r1.x, l(50.000000)
mov r1.z, -r1.y
deriv_rtx_coarse r1.y, r1.y
deriv_rty_coarse r1.z, r1.z
add r1.y, |r1.z|, |r1.y|
mad r1.z, r1.x, l(50.000000), l(-0.500000)
frc r1.z, r1.z
add r1.z, r1.z, l(-0.500000)
mul r1.z, |r1.z|, l(0.666667)
div r1.y, r1.z, r1.y
min r1.y, r1.y, l(1.000000)
add r1.y, -r1.y, l(1.000000)
ge r1.z, r1.x, l(-0.010000)
ge r1.w, l(0.090000), r1.x
and r1.zw, r1.zzzw, l(0, 0, 0x3f800000, 0x3f800000)
mul r1.z, r1.w, r1.z
mul r1.y, r1.z, r1.y
mul r2.xyz, cb0[3].xxxx, l(0.250000, 0.125000, 1.125000, 0.000000)
div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.x
mul r1.w, r1.x, r1.z
mad r1.z, r1.z, r1.x, l(-0.500000)
frc r1.z, r1.z
add r1.z, r1.z, l(-0.500000)
mul r1.z, |r1.z|, l(0.666667)
mov r2.x, -r1.w
deriv_rtx_coarse r1.w, r1.w
deriv_rty_coarse r2.x, r2.x
add r1.w, |r1.w|, |r2.x|
div r1.z, r1.z, r1.w
min r1.z, r1.z, l(1.000000)
add r1.z, -r1.z, l(1.000000)
ge r1.w, r1.x, -r2.y
ge r2.x, r2.z, r1.x
and r2.x, r2.x, l(0x3f800000)
and r1.w, r1.w, l(0x3f800000)
mul r1.w, r2.x, r1.w
mad r1.y, r1.z, r1.w, r1.y
mov r0.w, -r0.y
sample_indexable(texturecube)(float,float,float,float) r0.x, r0.xwzx, t2.xyzw, s2
mul r0.x, r0.x, cb0[5].x
add r0.y, r1.x, -cb0[7].x
lt r0.z, r1.x, cb0[3].x
and r0.z, r0.z, l(0x3f800000)
lt r0.x, r0.y, r0.x
movc r0.x, r0.x, l(-1.000000), l(-0.000000)
add r0.x, r0.x, cb0[6].x
mul r0.x, |r0.x|, r0.z
mul r0.x, r0.x, cb0[1].w
mov r2.xy, l(0,0,0,0)
mov r3.z, l(0)
div r4.xy, cb0[0].zwzz, v2.zzzz
mov r4.z, l(0)
add r5.xyzw, r4.xzzy, v5.xyxy
add r4.xyzw, -r4.xzzy, v5.xyxy
mad r6.xyzw, v2.zwzw, r5.xyzw, v2.xyxy
sample_indexable(texture2d)(float,float,float,float) r0.y, r6.xyxx, t3.yxzw, s3
sample_indexable(texture2d)(float,float,float,float) r0.z, r6.zwzz, t3.yzxw, s3
mad r1.xz, v2.zzwz, v5.xxyx, v2.xxyx
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xzxx, t3.yzwx, s3
add r1.x, -v3.x, v3.y
mad r1.z, v5.y, r1.x, v3.x
mul r0.w, r0.w, r1.z
mad r1.zw, r5.yyyw, r1.xxxx, v3.xxxx
mad r5.xy, r4.ywyy, r1.xxxx, v3.xxxx
mad r4.xyzw, v2.zwzw, r4.xyzw, v2.xyxy
mad r0.y, r0.y, r1.z, -r0.w
mad r0.z, r0.z, r1.w, -r0.w
mul r1.xz, cb0[8].xxyx, l(0.003906, 0.000000, 0.003906, 0.000000)
mul r3.x, r0.y, -r1.z
mul r6.x, r0.y, r1.z
sample_indexable(texture2d)(float,float,float,float) r0.y, r4.zwzz, t3.yxzw, s3
sample_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t3.yzwx, s3
mad r1.w, r1.w, r5.x, -r0.w
mad r0.y, r0.y, r5.y, -r0.w
mul r3.y, r1.x, r0.y
mul r4.y, r0.y, -r1.x
mul r2.z, r1.x, -r1.z
add r2.xyz, -r2.xyzx, r3.xyzx
mul r4.x, -r1.z, r1.w
mul r3.x, r1.w, r1.z
mov r5.xy, l(0,0,0,0)
mov r4.z, l(0)
mul r5.z, r1.z, r1.x
add r4.xyz, -r4.xyzx, r5.xyzx
add r2.xyz, r2.xyzx, r4.xyzx
mul r6.y, r0.z, r1.x
mul r3.y, r0.z, -r1.x
mov r4.xy, l(0,0,0,0)
mov r6.z, l(0)
mul r4.z, r1.z, r1.x
mul r5.z, -r1.x, r1.z
add r0.yzw, r4.xxyz, -r6.xxyz
add r0.yzw, r0.yyzw, r2.xxyz
mov r5.xy, l(0,0,0,0)
mov r3.z, l(0)
add r1.xzw, r3.xxyz, -r5.xxyz
add r0.yzw, r0.yyzw, r1.xxzw
dp3 r1.x, r0.yzwy, r0.yzwy
rsq r1.x, r1.x
mul r0.yzw, r0.yyzw, r1.xxxx
mad r1.x, |r0.w|, l(-0.018729), l(0.074261)
mad r1.x, r1.x, |r0.w|, l(-0.212114)
mad r1.x, r1.x, |r0.w|, l(1.570729)
add r1.z, -|r0.w|, l(1.000000)
sqrt r1.z, r1.z
mul r1.w, r1.z, r1.x
mad r1.w, r1.w, l(-2.000000), l(3.141593)
lt r2.x, r0.w, -r0.w
and r1.w, r1.w, r2.x
mad r1.x, r1.x, r1.z, r1.w
mul r2.z, r1.x, l(0.636620)
mov r2.yw, l(0,0,0,0)
sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.zwzz, t1.xyzw, s1
add r1.x, -cb0[10].x, cb0[10].y
ne r1.z, cb0[10].y, cb0[10].x
movc r1.w, r1.z, l(-1.000000), l(-0.000000)
and r1.z, r1.z, l(0x3f800000)
mad r1.x, r1.z, r1.x, r1.w
add r1.x, r1.x, l(1.000000)
add r1.w, v7.w, cb0[20].z
add r1.w, r1.w, -cb0[10].x
div r1.x, r1.w, r1.x
mul r2.x, r1.x, r1.z
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xyxx, t0.xyzw, s0
mad r1.xz, v5.xxyx, cb0[13].zzwz, cb0[13].xxyx
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r1.xzxx, t4.xyzw, s4
mul r1.x, r4.w, cb0[14].x
add r4.xyz, r4.xyzx, -cb0[19].xyzx
max r1.z, r4.w, cb0[19].w
mad r4.xyz, r1.xxxx, r4.xyzx, cb0[19].xyzx
mad r1.xw, v5.xxxy, cb0[15].zzzw, cb0[15].xxxy
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xwxx, t5.xyzw, s5
add r5.xyz, -r4.xyzx, r5.xyzx
mul r1.x, r5.w, cb0[16].x
max r1.z, r1.z, r5.w
mad r4.xyz, r1.xxxx, r5.xyzx, r4.xyzx
mad r1.xw, v5.xxxy, cb0[17].zzzw, cb0[17].xxxy
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r1.xwxx, t6.xyzw, s6
add r5.xyz, -r4.xyzx, r5.xyzx
mul r1.x, r5.w, cb0[18].x
max o0.w, r1.z, r5.w
mad r1.xzw, r1.xxxx, r5.xxyz, r4.xxyz
add r2.xyz, -r1.xzwx, r2.xyzx
mad r1.xzw, r2.wwww, r2.xxyz, r1.xxzw
add r2.xyz, -r1.xzwx, r3.xyzx
mad r1.xzw, r3.wwww, r2.xxyz, r1.xxzw
add r2.xyz, -r1.xzwx, cb0[12].xyzx
add r2.w, -cb0[11].x, l(1.000000)
div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
add r3.x, v4.x, -cb0[11].x
mul_sat r2.w, r2.w, r3.x
mad r3.x, r2.w, l(-2.000000), l(3.000000)
mul r2.w, r2.w, r2.w
mul r2.w, r2.w, r3.x
mad r1.xzw, r2.wwww, r2.xxyz, r1.xxzw
add r2.x, r1.z, r1.x
add r2.x, r1.w, r2.x
mul r2.x, r2.x, l(0.333333)
mad r2.xyz, r2.xxxx, cb0[1].xyzx, -r1.xzwx
mad r1.xzw, r0.xxxx, r2.xxyz, r1.xxzw
add r2.xyz, -r1.xzwx, cb0[2].xyzx
mul r2.xyz, r2.xyzx, cb0[2].wwww
mad r1.xyz, r1.yyyy, r2.xyzx, r1.xzwx
dp3 r0.x, -v7.xyzx, -v7.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, -v7.xyzx
max r0.x, r2.z, l(0.000000)
add r0.x, -r0.x, l(1.000000)
mul r0.x, r0.x, l(0.700000)
max r3.z, r0.x, l(0.200000)
mul r3.xy, r2.yxyy, l(0.500000, -0.500000, 0.000000, 0.000000)
dp3 r0.x, r0.yzwy, r3.xyzx
mul r0.xyz, r0.yzwy, r0.xxxx
max r0.w, r0.w, l(0.000000)
add r0.w, -r0.w, l(1.000000)
mad r0.w, r0.w, l(1.800000), l(0.100000)
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), -r3.xyzx
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3_sat r0.x, r0.xyzx, r2.xyzx
log r0.x, r0.x
mul r0.x, r0.x, cb0[9].y
exp r0.x, r0.x
mul r0.x, r0.x, cb0[9].x
mul r0.x, r0.w, r0.x
add r0.y, -v7.z, l(-5.000000)
mul_sat r0.y, r0.y, l(0.010000)
mad o0.xyz, r0.xxxx, r0.yyyy, r1.xyzx
div r0.x, v6.z, v6.w
mad r0.x, r0.x, l(0.500000), l(0.500000)
mul r0.y, r0.x, l(256.000000)
round_ni r0.y, r0.y
mad r0.x, r0.x, l(256.000000), -r0.y
mul o1.x, r0.y, l(0.003906)
mul r0.y, r0.x, l(256.000000)
round_ni r0.y, r0.y
mad r0.x, r0.x, l(256.000000), -r0.y
mul r0.x, r0.x, l(256.000000)
round_ni r0.x, r0.x
mul o1.yz, r0.yyxy, l(0.000000, 0.003906, 0.003906, 0.000000)
mov o1.w, l(1.000000)
ret 
// Approximately 0 instruction slots used
 