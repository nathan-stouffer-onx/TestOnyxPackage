varying vec4 v_color4;
varying vec4 v_texcoord0;
varying vec4 v_texcoord1;
varying vec4 v_texcoord2;
varying vec4 v_texcoord3;
varying vec4 v_texcoord4;
varying vec4 v_texcoord5;
varying vec4 v_texcoord6;
varying vec4 v_texcoord7;
uniform sampler2D s_ElevationShadeTexture;
uniform vec4 s_ElevationShadeTexture_Res;
uniform sampler2D s_SlopeAngleShadeTexture;
uniform sampler2D s_SlopeAspectShadeTexture;
uniform sampler2D s_heightTexture;
uniform vec4 s_heightTexture_Res;
uniform sampler2D s_sunShadowDepth;
uniform sampler2D s_texture0;
uniform vec4 u_IntersectTint;
uniform vec4 u_IntersectInverted;
uniform vec4 u_ElevationExtents;
uniform vec4 u_tileSize;
uniform vec4 u_lightStrengthPow;
uniform vec4 u_ContourParams0;
uniform vec4 u_ContourColor0;
uniform vec4 u_ContourParams1;
uniform vec4 u_ContourColor1;
uniform vec4 u_ContourFade;
uniform vec4 u_SunMinStrength;
uniform vec4 u_SunAmbient;
uniform vec4 u_sunShadowBias;
uniform vec4 u_sunShadowStrength;
uniform vec4 u_sunShadowVSMParams;
uniform vec4 u_CascadeDebug;
uniform vec4 u_FogTransition;
uniform vec4 u_FogColor;
uniform vec4 u_ScaleOffsetTex0;
uniform vec4 u_OpacityTex0;
uniform vec4 u_BackgroundColor;
uniform vec4 u_NearFarFocus;
void main ()
{
  float d_1;
  vec2 projectedUV_2;
  vec4 fragColor_3;
  vec3 normal_4;
  float tmpvar_5;
  tmpvar_5 = ((0.5 * s_heightTexture_Res.z) / v_color4.z);
  vec2 tmpvar_6;
  tmpvar_6.y = 0.0;
  tmpvar_6.x = tmpvar_5;
  vec2 tmpvar_7;
  tmpvar_7 = (v_texcoord5.xy - tmpvar_6);
  vec2 tmpvar_8;
  tmpvar_8.y = 0.0;
  tmpvar_8.x = tmpvar_5;
  vec2 tmpvar_9;
  tmpvar_9 = (v_texcoord5.xy + tmpvar_8);
  vec2 tmpvar_10;
  tmpvar_10.x = 0.0;
  tmpvar_10.y = tmpvar_5;
  vec2 tmpvar_11;
  tmpvar_11 = (v_texcoord5.xy - tmpvar_10);
  vec2 tmpvar_12;
  tmpvar_12.x = 0.0;
  tmpvar_12.y = tmpvar_5;
  vec2 tmpvar_13;
  tmpvar_13 = (v_texcoord5.xy + tmpvar_12);
  vec3 tmpvar_14;
  tmpvar_14.x = ((texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_7)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_7.y)) - (texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_9)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_9.y)));
  tmpvar_14.y = ((texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_11)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_11.y)) - (texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_13)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_13.y)));
  tmpvar_14.z = (2.0 * (tmpvar_5 * u_tileSize.x));
  normal_4 = normalize(tmpvar_14);
  vec4 color_15;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (s_texture0, (u_ScaleOffsetTex0.xy + (v_texcoord5.xy * u_ScaleOffsetTex0.zw)));
  color_15.xyz = mix (u_BackgroundColor.xyz, tmpvar_16.xyz, (tmpvar_16.w * u_OpacityTex0.x));
  color_15.w = max (u_BackgroundColor.w, tmpvar_16.w);
  vec3 tangentSun_17;
  vec3 planetNormal_18;
  float tmpvar_19;
  tmpvar_19 = (6.283185 * (v_texcoord2.x - 0.5));
  float tmpvar_20;
  tmpvar_20 = ((6.283185 * (
    (1.0 - v_texcoord2.y)
   - 0.5)) / 2.0);
  planetNormal_18.x = (cos(tmpvar_20) * cos(tmpvar_19));
  planetNormal_18.y = (cos(tmpvar_20) * sin(tmpvar_19));
  planetNormal_18.z = sin(tmpvar_20);
  vec3 tmpvar_21;
  tmpvar_21 = normalize(((planetNormal_18.yzx * vec3(0.0, 1.0, 0.0)) - (planetNormal_18.zxy * vec3(0.0, 0.0, 1.0))));
  tangentSun_17.x = -(dot (tmpvar_21, v_texcoord3.xyz));
  tangentSun_17.y = -(dot (normalize(
    ((planetNormal_18.yzx * tmpvar_21.zxy) - (planetNormal_18.zxy * tmpvar_21.yzx))
  ), v_texcoord3.xyz));
  tangentSun_17.z = dot (planetNormal_18, v_texcoord3.xyz);
  vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = mix (vec3(clamp (dot (tangentSun_17, normal_4), 0.0, 1.0)), (vec3(0.75, 0.79, 1.0) * dot (
    ((normal_4 * 2.0) - 1.0)
  , vec3(0.1924501, 0.1924501, 0.9622505))), (0.5 * u_SunAmbient.x));
  vec4 tmpvar_23;
  tmpvar_23 = mix (color_15, tmpvar_22, u_SunMinStrength.x);
  fragColor_3.w = tmpvar_23.w;
  float tmpvar_24;
  tmpvar_24 = (v_texcoord1.z - u_sunShadowBias.x);
  projectedUV_2 = (v_texcoord1.xy / v_texcoord1.w);
  projectedUV_2 = ((projectedUV_2 * 0.5) + 0.5);
  vec4 tmpvar_25;
  tmpvar_25 = texture2D (s_sunShadowDepth, projectedUV_2);
  float tmpvar_26;
  tmpvar_26 = max ((tmpvar_25.y - (tmpvar_25.x * tmpvar_25.x)), u_sunShadowVSMParams.x);
  float tmpvar_27;
  tmpvar_27 = (tmpvar_24 - tmpvar_25.x);
  fragColor_3.xyz = mix (tmpvar_23.xyz, vec3(min (max (
    float((tmpvar_24 <= tmpvar_25.x))
  , 
    clamp ((((tmpvar_26 / 
      (tmpvar_26 + (tmpvar_27 * tmpvar_27))
    ) - u_sunShadowVSMParams.y) / (1.0 - u_sunShadowVSMParams.y)), 0.0, 1.0)
  ), 1.0)), u_sunShadowStrength.x);
  if ((u_CascadeDebug.x > 0.5)) {
    fragColor_3.xyz = texture2D (s_sunShadowDepth, projectedUV_2).xyz;
  };
  float tmpvar_28;
  tmpvar_28 = clamp (((
    sqrt(dot (v_texcoord7.xyz, v_texcoord7.xyz))
   - u_ContourFade.x) / (u_ContourFade.y - u_ContourFade.x)), 0.0, 1.0);
  float tmpvar_29;
  tmpvar_29 = (1.0 - (tmpvar_28 * (tmpvar_28 * 
    (3.0 - (2.0 * tmpvar_28))
  )));
  float tmpvar_30;
  float tmpvar_31;
  tmpvar_31 = dot (v_texcoord7, v_texcoord7);
  float tmpvar_32;
  tmpvar_32 = max (u_NearFarFocus.z, 1.5);
  tmpvar_30 = (u_ContourParams0.w * min (1.0, (tmpvar_32 / 
    sqrt(tmpvar_31)
  )));
  float tmpvar_33;
  tmpvar_33 = ((1.0/(u_ContourParams0.x)) * v_texcoord7.w);
  float tmpvar_34;
  tmpvar_34 = (0.5 * u_ContourParams0.x);
  fragColor_3.xyz = mix (fragColor_3.xyz, mix (fragColor_3.xyz, u_ContourColor0.xyz, (u_ContourColor0.w * 
    min (tmpvar_30, 1.0)
  )), (clamp (
    (pow (((
      (1.0 - min (((
        (1.0/(max (1.5, tmpvar_30)))
       * 
        abs((fract((tmpvar_33 - 0.5)) - 0.5))
      ) / (
        abs(dFdx(tmpvar_33))
       + 
        abs(dFdy(tmpvar_33))
      )), 1.0))
     * 
      (float(((u_ContourParams0.y - tmpvar_34) <= v_texcoord7.w)) * float((v_texcoord7.w <= (u_ContourParams0.z + tmpvar_34))))
    ) + 0.5), 3.0) - 0.5)
  , 0.0, 1.0) * tmpvar_29));
  float tmpvar_35;
  tmpvar_35 = (u_ContourParams1.w * min (1.0, (tmpvar_32 / 
    sqrt(tmpvar_31)
  )));
  float tmpvar_36;
  tmpvar_36 = ((1.0/(u_ContourParams1.x)) * v_texcoord7.w);
  float tmpvar_37;
  tmpvar_37 = (0.5 * u_ContourParams1.x);
  fragColor_3.xyz = mix (fragColor_3.xyz, mix (fragColor_3.xyz, u_ContourColor1.xyz, (u_ContourColor1.w * 
    min (tmpvar_35, 1.0)
  )), (clamp (
    (pow (((
      (1.0 - min (((
        (1.0/(max (1.5, tmpvar_35)))
       * 
        abs((fract((tmpvar_36 - 0.5)) - 0.5))
      ) / (
        abs(dFdx(tmpvar_36))
       + 
        abs(dFdy(tmpvar_36))
      )), 1.0))
     * 
      (float(((u_ContourParams1.y - tmpvar_37) <= v_texcoord7.w)) * float((v_texcoord7.w <= (u_ContourParams1.z + tmpvar_37))))
    ) + 0.5), 3.0) - 0.5)
  , 0.0, 1.0) * tmpvar_29));
  float tmpvar_38;
  tmpvar_38 = (1.570796 - (sign(normal_4.z) * (1.570796 - 
    (sqrt((1.0 - abs(normal_4.z))) * (1.570796 + (abs(normal_4.z) * (-0.2146018 + 
      (abs(normal_4.z) * (0.08656672 + (abs(normal_4.z) * -0.03102955)))
    ))))
  )));
  float rad_39;
  float vec_y_40;
  vec_y_40 = -(normal_4.y);
  float tmpvar_41;
  float tmpvar_42;
  tmpvar_42 = (min (abs(
    (vec_y_40 / normal_4.x)
  ), 1.0) / max (abs(
    (vec_y_40 / normal_4.x)
  ), 1.0));
  float tmpvar_43;
  tmpvar_43 = (tmpvar_42 * tmpvar_42);
  tmpvar_43 = (((
    ((((
      ((((-0.01213232 * tmpvar_43) + 0.05368138) * tmpvar_43) - 0.1173503)
     * tmpvar_43) + 0.1938925) * tmpvar_43) - 0.3326756)
   * tmpvar_43) + 0.9999793) * tmpvar_42);
  tmpvar_43 = (tmpvar_43 + (float(
    (abs((vec_y_40 / normal_4.x)) > 1.0)
  ) * (
    (tmpvar_43 * -2.0)
   + 1.570796)));
  tmpvar_41 = (tmpvar_43 * sign((vec_y_40 / normal_4.x)));
  if ((abs(normal_4.x) > (1e-08 * abs(vec_y_40)))) {
    if ((normal_4.x < 0.0)) {
      if ((vec_y_40 >= 0.0)) {
        tmpvar_41 += 3.141593;
      } else {
        tmpvar_41 = (tmpvar_41 - 3.141593);
      };
    };
  } else {
    tmpvar_41 = (sign(vec_y_40) * 1.570796);
  };
  rad_39 = (tmpvar_41 - 1.570796);
  rad_39 = (rad_39 + (float(
    (rad_39 < 0.0)
  ) * 6.283185));
  rad_39 = (6.283185 - rad_39);
  float tmpvar_44;
  tmpvar_44 = float((u_ElevationExtents.x != u_ElevationExtents.y));
  float tmpvar_45;
  tmpvar_45 = (((tmpvar_44 * 
    ((v_texcoord7.w - u_ElevationExtents.x) / ((tmpvar_44 * (u_ElevationExtents.y - u_ElevationExtents.x)) + (1.0 - tmpvar_44)))
  ) * s_ElevationShadeTexture_Res.x) * s_ElevationShadeTexture_Res.y);
  vec2 tmpvar_46;
  tmpvar_46.x = (float(mod (tmpvar_45, s_ElevationShadeTexture_Res.x)));
  tmpvar_46.y = floor((tmpvar_45 / s_ElevationShadeTexture_Res.y));
  vec2 tmpvar_47;
  tmpvar_47.y = 0.0;
  tmpvar_47.x = (tmpvar_38 / 1.570796);
  vec2 tmpvar_48;
  tmpvar_48.y = 0.0;
  tmpvar_48.x = (rad_39 / 6.283185);
  fragColor_3.xyz = mix (fragColor_3.xyz, ((
    ((fragColor_3.x + fragColor_3.y) + fragColor_3.z)
   / 3.0) * u_IntersectTint.xyz), (abs(
    (u_IntersectInverted.x - ((texture2D (s_ElevationShadeTexture, (tmpvar_46 / s_ElevationShadeTexture_Res.xy)).x * texture2D (s_SlopeAngleShadeTexture, tmpvar_47).x) * texture2D (s_SlopeAspectShadeTexture, tmpvar_48).x))
  ) * u_IntersectTint.w));
  float tmpvar_49;
  tmpvar_49 = clamp (((v_texcoord4.x - u_FogTransition.x) / (u_FogTransition.y - u_FogTransition.x)), 0.0, 1.0);
  fragColor_3.xyz = mix (fragColor_3.xyz, u_FogColor.xyz, ((tmpvar_49 * 
    (tmpvar_49 * (3.0 - (2.0 * tmpvar_49)))
  ) * u_FogColor.w));
  gl_FragData[0] = fragColor_3;
  float tmpvar_50;
  tmpvar_50 = (((
    (v_texcoord6.z / v_texcoord6.w)
   * 0.5) + 0.5) * 256.0);
  float tmpvar_51;
  tmpvar_51 = floor(tmpvar_50);
  d_1 = ((tmpvar_50 - tmpvar_51) * 256.0);
  float tmpvar_52;
  tmpvar_52 = floor(d_1);
  d_1 = ((d_1 - tmpvar_52) * 256.0);
  vec4 tmpvar_53;
  tmpvar_53.w = 1.0;
  tmpvar_53.x = (tmpvar_51 / 256.0);
  tmpvar_53.y = (tmpvar_52 / 256.0);
  tmpvar_53.z = (floor(d_1) / 256.0);
  gl_FragData[1] = tmpvar_53;
  vec3 tmpvar_54;
  tmpvar_54 = normalize(-(v_texcoord7.xyz));
  vec3 tmpvar_55;
  tmpvar_55.x = (tmpvar_54.y * 0.5);
  tmpvar_55.y = (-(tmpvar_54.x) * 0.5);
  tmpvar_55.z = max ((0.7 * (1.0 - 
    max (0.0, tmpvar_54.z)
  )), 0.2);
  gl_FragData[0].xyz = (gl_FragData[0].xyz + ((
    (pow (min (max (
      dot (normalize(((
        (2.0 * normal_4)
       * 
        dot (normal_4, tmpvar_55)
      ) - tmpvar_55)), tmpvar_54)
    , 0.0), 1.0), u_lightStrengthPow.y) * u_lightStrengthPow.x)
   * 
    ((1.8 * (1.0 - max (0.0, normal_4.z))) + 0.1)
  ) * min (
    max (((-(v_texcoord7.z) - 5.0) / 100.0), 0.0)
  , 1.0)));
}

