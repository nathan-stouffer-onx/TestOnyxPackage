varying vec4 v_texcoord2;
varying vec4 v_texcoord3;
varying vec4 v_texcoord4;
varying vec4 v_texcoord5;
varying vec4 v_texcoord6;
varying vec4 v_texcoord7;
uniform sampler2D s_ElevationShadeTexture;
uniform vec4 s_ElevationShadeTexture_Res;
uniform sampler2D s_SlopeAngleShadeTexture;
uniform sampler2D s_SlopeAspectShadeTexture;
uniform sampler2D s_heightTexture;
uniform vec4 s_heightTexture_Res;
uniform sampler2D s_texture0;
uniform sampler2D s_texture1;
uniform sampler2D s_texture2;
uniform vec4 u_IntersectTint;
uniform vec4 u_IntersectInverted;
uniform vec4 u_ElevationExtents;
uniform vec4 u_tileSize;
uniform vec4 u_lightStrengthPow;
uniform vec4 u_HillshadeLightDir;
uniform vec4 u_HillshadeAlbedo;
uniform vec4 u_HillshadeParams;
uniform vec4 u_FogTransition;
uniform vec4 u_FogColor;
uniform vec4 u_ScaleOffsetTex0;
uniform vec4 u_OpacityTex0;
uniform vec4 u_ScaleOffsetTex1;
uniform vec4 u_OpacityTex1;
uniform vec4 u_ScaleOffsetTex2;
uniform vec4 u_OpacityTex2;
uniform vec4 u_BackgroundColor;
void main ()
{
  float d_1;
  vec4 fragColor_2;
  vec3 normal_3;
  float tmpvar_4;
  tmpvar_4 = ((0.5 * s_heightTexture_Res.z) / v_texcoord2.z);
  vec2 tmpvar_5;
  tmpvar_5.y = 0.0;
  tmpvar_5.x = tmpvar_4;
  vec2 tmpvar_6;
  tmpvar_6 = (v_texcoord5.xy - tmpvar_5);
  vec2 tmpvar_7;
  tmpvar_7.y = 0.0;
  tmpvar_7.x = tmpvar_4;
  vec2 tmpvar_8;
  tmpvar_8 = (v_texcoord5.xy + tmpvar_7);
  vec2 tmpvar_9;
  tmpvar_9.x = 0.0;
  tmpvar_9.y = tmpvar_4;
  vec2 tmpvar_10;
  tmpvar_10 = (v_texcoord5.xy - tmpvar_9);
  vec2 tmpvar_11;
  tmpvar_11.x = 0.0;
  tmpvar_11.y = tmpvar_4;
  vec2 tmpvar_12;
  tmpvar_12 = (v_texcoord5.xy + tmpvar_11);
  vec3 tmpvar_13;
  tmpvar_13.x = ((texture2DLod (s_heightTexture, (
    (v_texcoord2.zw * tmpvar_6)
   + v_texcoord2.xy), 0.0).x * mix (v_texcoord3.x, v_texcoord3.y, tmpvar_6.y)) - (texture2DLod (s_heightTexture, (
    (v_texcoord2.zw * tmpvar_8)
   + v_texcoord2.xy), 0.0).x * mix (v_texcoord3.x, v_texcoord3.y, tmpvar_8.y)));
  tmpvar_13.y = ((texture2DLod (s_heightTexture, (
    (v_texcoord2.zw * tmpvar_10)
   + v_texcoord2.xy), 0.0).x * mix (v_texcoord3.x, v_texcoord3.y, tmpvar_10.y)) - (texture2DLod (s_heightTexture, (
    (v_texcoord2.zw * tmpvar_12)
   + v_texcoord2.xy), 0.0).x * mix (v_texcoord3.x, v_texcoord3.y, tmpvar_12.y)));
  tmpvar_13.z = (2.0 * (tmpvar_4 * u_tileSize.x));
  normal_3 = normalize(tmpvar_13);
  vec4 color_14;
  vec4 tmpvar_15;
  tmpvar_15 = texture2D (s_texture0, (u_ScaleOffsetTex0.xy + (v_texcoord5.xy * u_ScaleOffsetTex0.zw)));
  color_14.xyz = mix (u_BackgroundColor.xyz, tmpvar_15.xyz, (tmpvar_15.w * u_OpacityTex0.x));
  color_14.w = max (u_BackgroundColor.w, tmpvar_15.w);
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (s_texture1, (u_ScaleOffsetTex1.xy + (v_texcoord5.xy * u_ScaleOffsetTex1.zw)));
  color_14.xyz = mix (color_14.xyz, tmpvar_16.xyz, (tmpvar_16.w * u_OpacityTex1.x));
  color_14.w = max (color_14.w, tmpvar_16.w);
  vec4 tmpvar_17;
  tmpvar_17 = texture2D (s_texture2, (u_ScaleOffsetTex2.xy + (v_texcoord5.xy * u_ScaleOffsetTex2.zw)));
  color_14.xyz = mix (color_14.xyz, tmpvar_17.xyz, (tmpvar_17.w * u_OpacityTex2.x));
  color_14.w = max (color_14.w, tmpvar_17.w);
  fragColor_2.w = color_14.w;
  vec3 tmpvar_18;
  tmpvar_18.xy = (u_HillshadeParams.y * normal_3.xy);
  tmpvar_18.z = normal_3.z;
  fragColor_2.xyz = mix (color_14.xyz, ((u_HillshadeParams.x + 
    ((1.0 - u_HillshadeParams.x) * (0.5 * (1.0 + dot (
      normalize(tmpvar_18)
    , 
      -(u_HillshadeLightDir.xyz)
    ))))
  ) * u_HillshadeAlbedo.xyz), u_HillshadeAlbedo.w);
  float tmpvar_19;
  tmpvar_19 = (1.570796 - (sign(normal_3.z) * (1.570796 - 
    (sqrt((1.0 - abs(normal_3.z))) * (1.570796 + (abs(normal_3.z) * (-0.2146018 + 
      (abs(normal_3.z) * (0.08656672 + (abs(normal_3.z) * -0.03102955)))
    ))))
  )));
  float rad_20;
  float vec_y_21;
  vec_y_21 = -(normal_3.y);
  float tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (min (abs(
    (vec_y_21 / normal_3.x)
  ), 1.0) / max (abs(
    (vec_y_21 / normal_3.x)
  ), 1.0));
  float tmpvar_24;
  tmpvar_24 = (tmpvar_23 * tmpvar_23);
  tmpvar_24 = (((
    ((((
      ((((-0.01213232 * tmpvar_24) + 0.05368138) * tmpvar_24) - 0.1173503)
     * tmpvar_24) + 0.1938925) * tmpvar_24) - 0.3326756)
   * tmpvar_24) + 0.9999793) * tmpvar_23);
  tmpvar_24 = (tmpvar_24 + (float(
    (abs((vec_y_21 / normal_3.x)) > 1.0)
  ) * (
    (tmpvar_24 * -2.0)
   + 1.570796)));
  tmpvar_22 = (tmpvar_24 * sign((vec_y_21 / normal_3.x)));
  if ((abs(normal_3.x) > (1e-08 * abs(vec_y_21)))) {
    if ((normal_3.x < 0.0)) {
      if ((vec_y_21 >= 0.0)) {
        tmpvar_22 += 3.141593;
      } else {
        tmpvar_22 = (tmpvar_22 - 3.141593);
      };
    };
  } else {
    tmpvar_22 = (sign(vec_y_21) * 1.570796);
  };
  rad_20 = (tmpvar_22 - 1.570796);
  rad_20 = (rad_20 + (float(
    (rad_20 < 0.0)
  ) * 6.283185));
  rad_20 = (6.283185 - rad_20);
  float tmpvar_25;
  tmpvar_25 = float((u_ElevationExtents.x != u_ElevationExtents.y));
  float tmpvar_26;
  tmpvar_26 = (((tmpvar_25 * 
    ((v_texcoord7.w - u_ElevationExtents.x) / ((tmpvar_25 * (u_ElevationExtents.y - u_ElevationExtents.x)) + (1.0 - tmpvar_25)))
  ) * s_ElevationShadeTexture_Res.x) * s_ElevationShadeTexture_Res.y);
  vec2 tmpvar_27;
  tmpvar_27.x = (float(mod (tmpvar_26, s_ElevationShadeTexture_Res.x)));
  tmpvar_27.y = floor((tmpvar_26 / s_ElevationShadeTexture_Res.y));
  vec2 tmpvar_28;
  tmpvar_28.y = 0.0;
  tmpvar_28.x = (tmpvar_19 / 1.570796);
  vec2 tmpvar_29;
  tmpvar_29.y = 0.0;
  tmpvar_29.x = (rad_20 / 6.283185);
  fragColor_2.xyz = mix (fragColor_2.xyz, ((
    ((fragColor_2.x + fragColor_2.y) + fragColor_2.z)
   / 3.0) * u_IntersectTint.xyz), (abs(
    (u_IntersectInverted.x - ((texture2D (s_ElevationShadeTexture, (tmpvar_27 / s_ElevationShadeTexture_Res.xy)).x * texture2D (s_SlopeAngleShadeTexture, tmpvar_28).x) * texture2D (s_SlopeAspectShadeTexture, tmpvar_29).x))
  ) * u_IntersectTint.w));
  float tmpvar_30;
  tmpvar_30 = clamp (((v_texcoord4.x - u_FogTransition.x) / (u_FogTransition.y - u_FogTransition.x)), 0.0, 1.0);
  fragColor_2.xyz = mix (fragColor_2.xyz, u_FogColor.xyz, ((tmpvar_30 * 
    (tmpvar_30 * (3.0 - (2.0 * tmpvar_30)))
  ) * u_FogColor.w));
  gl_FragData[0] = fragColor_2;
  float tmpvar_31;
  tmpvar_31 = (((
    (v_texcoord6.z / v_texcoord6.w)
   * 0.5) + 0.5) * 256.0);
  float tmpvar_32;
  tmpvar_32 = floor(tmpvar_31);
  d_1 = ((tmpvar_31 - tmpvar_32) * 256.0);
  float tmpvar_33;
  tmpvar_33 = floor(d_1);
  d_1 = ((d_1 - tmpvar_33) * 256.0);
  vec4 tmpvar_34;
  tmpvar_34.w = 1.0;
  tmpvar_34.x = (tmpvar_32 / 256.0);
  tmpvar_34.y = (tmpvar_33 / 256.0);
  tmpvar_34.z = (floor(d_1) / 256.0);
  gl_FragData[1] = tmpvar_34;
  vec3 tmpvar_35;
  tmpvar_35 = normalize(-(v_texcoord7.xyz));
  vec3 tmpvar_36;
  tmpvar_36.x = (tmpvar_35.y * 0.5);
  tmpvar_36.y = (-(tmpvar_35.x) * 0.5);
  tmpvar_36.z = max ((0.7 * (1.0 - 
    max (0.0, tmpvar_35.z)
  )), 0.2);
  gl_FragData[0].xyz = (gl_FragData[0].xyz + ((
    (pow (min (max (
      dot (normalize(((
        (2.0 * normal_3)
       * 
        dot (normal_3, tmpvar_36)
      ) - tmpvar_36)), tmpvar_35)
    , 0.0), 1.0), u_lightStrengthPow.y) * u_lightStrengthPow.x)
   * 
    ((1.8 * (1.0 - max (0.0, normal_3.z))) + 0.1)
  ) * min (
    max (((-(v_texcoord7.z) - 5.0) / 100.0), 0.0)
  , 1.0)));
}

