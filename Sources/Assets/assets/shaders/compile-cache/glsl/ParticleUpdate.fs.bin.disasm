varying vec3 v_bitangent;
uniform sampler2D s_posLifeTex;
uniform sampler2D s_velocSeedTex;
uniform vec4 u_velLifeMinMax;
uniform vec4 u_initAccelDeltaProg;
void main ()
{
  vec4 velocSeed_1;
  vec4 posLife_2;
  vec4 tmpvar_3;
  tmpvar_3 = texture2D (s_posLifeTex, v_bitangent.xy);
  posLife_2.xyz = tmpvar_3.xyz;
  posLife_2.w = (tmpvar_3.w - (u_initAccelDeltaProg.x * tmpvar_3.w));
  vec4 tmpvar_4;
  tmpvar_4 = texture2D (s_velocSeedTex, v_bitangent.xy);
  velocSeed_1 = tmpvar_4;
  if ((posLife_2.w <= 0.0)) {
    float tmpvar_5;
    tmpvar_5 = dot (v_bitangent.xy, vec2(13.9841, 4.2129));
    float tmpvar_6;
    tmpvar_6 = ((u_initAccelDeltaProg.x * (0.5 + 
      ((0.5 * sin((
        (cos(tmpvar_5) * cos((tmpvar_5 * tmpvar_5)))
       / 
        sin((12.321 * tmpvar_5))
      ))) * cos(cos((32.2121 * tmpvar_5))))
    )) + ((1.0 - u_initAccelDeltaProg.x) * tmpvar_4.w));
    float tmpvar_7;
    tmpvar_7 = mix (u_velLifeMinMax.x, u_velLifeMinMax.y, tmpvar_6);
    float tmpvar_8;
    tmpvar_8 = (0.5 + ((0.5 * 
      sin(((cos(tmpvar_6) * cos(
        (tmpvar_6 * tmpvar_6)
      )) / sin((12.321 * tmpvar_6))))
    ) * cos(
      cos((32.2121 * tmpvar_6))
    )));
    float tmpvar_9;
    tmpvar_9 = (6.283185 * v_bitangent.x);
    float tmpvar_10;
    tmpvar_10 = (0.5 + ((0.5 * 
      sin(((cos(tmpvar_8) * cos(
        (tmpvar_8 * tmpvar_8)
      )) / sin((12.321 * tmpvar_8))))
    ) * cos(
      cos((32.2121 * tmpvar_8))
    )));
    float tmpvar_11;
    tmpvar_11 = (0.03490658 * v_bitangent.y);
    float tmpvar_12;
    tmpvar_12 = sin(tmpvar_11);
    vec3 tmpvar_13;
    tmpvar_13.x = ((tmpvar_7 * tmpvar_12) * cos(tmpvar_9));
    tmpvar_13.y = ((tmpvar_7 * tmpvar_12) * sin(tmpvar_9));
    tmpvar_13.z = (tmpvar_7 * cos(tmpvar_11));
    float tmpvar_14;
    tmpvar_14 = (0.5 + ((0.5 * 
      sin(((cos(tmpvar_10) * cos(
        (tmpvar_10 * tmpvar_10)
      )) / sin((12.321 * tmpvar_10))))
    ) * cos(
      cos((32.2121 * tmpvar_10))
    )));
    vec4 tmpvar_15;
    tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
    tmpvar_15.w = mix (u_velLifeMinMax.z, u_velLifeMinMax.w, tmpvar_14);
    posLife_2 = tmpvar_15;
    vec4 tmpvar_16;
    tmpvar_16.xyz = tmpvar_13;
    tmpvar_16.w = tmpvar_14;
    velocSeed_1 = tmpvar_16;
  } else {
    posLife_2.xyz = (posLife_2.xyz + (u_initAccelDeltaProg.z * velocSeed_1.xyz));
    posLife_2.w = clamp ((posLife_2.w - u_initAccelDeltaProg.w), 0.0, posLife_2.w);
    velocSeed_1.z = (velocSeed_1.z + (u_initAccelDeltaProg.z * u_initAccelDeltaProg.y));
  };
  gl_FragData[0] = posLife_2;
  gl_FragData[1] = velocSeed_1;
}

