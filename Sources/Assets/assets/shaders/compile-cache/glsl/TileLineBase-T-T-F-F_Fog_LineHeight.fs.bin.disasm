varying vec4 v_color0;
varying vec4 v_color1;
varying vec4 v_color2;
varying vec4 v_color3;
varying vec4 v_color4;
varying float v_depth;
varying vec4 v_texcoord0;
varying vec4 v_texcoord1;
varying vec4 v_texcoord3;
varying vec4 v_texcoord4;
varying vec4 v_texcoord5;
varying vec4 v_texcoord6;
varying vec4 v_texcoord7;
uniform sampler2D s_DashSampler;
uniform vec4 s_DashSampler_Res;
uniform vec4 u_FogTransition;
uniform vec4 u_FogColor;
uniform vec4 u_TileFragClip;
uniform vec4 u_vectorFade;
void main ()
{
  vec4 fragColor_1;
  vec4 casingColor_2;
  vec4 lineColor_3;
  lineColor_3 = v_texcoord5;
  casingColor_2 = v_texcoord4;
  float tmpvar_4;
  tmpvar_4 = (float((u_TileFragClip.x <= v_texcoord7.x)) * float((v_texcoord7.x <= u_TileFragClip.z)));
  float tmpvar_5;
  tmpvar_5 = (float((u_TileFragClip.y <= v_texcoord7.y)) * float((v_texcoord7.y <= u_TileFragClip.w)));
  if (((tmpvar_4 * tmpvar_5) == 0.0)) {
    discard;
  };
  bool tmpvar_6;
  tmpvar_6 = (dot ((v_texcoord3.xy - v_color4.xy), v_texcoord1.xy) < 0.0);
  bool tmpvar_7;
  tmpvar_7 = (dot ((v_texcoord3.xy - v_color4.zw), v_texcoord1.zw) < 0.0);
  bool tmpvar_8;
  tmpvar_8 = (v_color2.x > -999999.0);
  bool tmpvar_9;
  tmpvar_9 = (v_color2.y > -999999.0);
  if (((tmpvar_6 && tmpvar_8) || (tmpvar_7 && tmpvar_9))) {
    discard;
  };
  float v_10;
  v_10 = (v_depth + (0.5 * (1.0/(s_DashSampler_Res.xy)).y));
  vec2 tmpvar_11;
  tmpvar_11.x = 0.0;
  tmpvar_11.y = v_10;
  vec2 tmpvar_12;
  tmpvar_12.x = (((float(mod (
    ((mix (v_color3.x, v_color3.y, v_texcoord6.y) * 256.0) / max (1.0, floor(v_texcoord0.x)))
  , 
    floor(((texture2D (s_DashSampler, tmpvar_11).x * (s_DashSampler_Res.x - 1.0)) + 0.5))
  ))) + 1.0) / s_DashSampler_Res.x);
  tmpvar_12.y = v_10;
  vec4 tmpvar_13;
  tmpvar_13 = texture2D (s_DashSampler, tmpvar_12);
  float s_14;
  float tmpvar_15;
  tmpvar_15 = (0.5 * (v_texcoord0.x + 1.0));
  vec2 tmpvar_16;
  tmpvar_16 = (v_color4.zw - v_color4.xy);
  float tmpvar_17;
  vec2 x_18;
  x_18 = (v_texcoord3.xy - (v_color4.xy + (
    clamp ((dot ((v_texcoord3.xy - v_color4.xy), tmpvar_16) / dot (tmpvar_16, tmpvar_16)), 0.0, 1.0)
   * tmpvar_16)));
  tmpvar_17 = sqrt(dot (x_18, x_18));
  s_14 = 1.0;
  if ((v_texcoord0.x < 1.0)) {
    s_14 = (v_texcoord0.x - max (0.0, (tmpvar_17 + 
      (0.5 * (v_texcoord0.x - 1.0))
    )));
  } else {
    float tmpvar_19;
    tmpvar_19 = max (0.0, (tmpvar_15 - 2.0));
    float tmpvar_20;
    tmpvar_20 = float((tmpvar_15 != tmpvar_19));
    s_14 = (tmpvar_20 * ((tmpvar_17 - tmpvar_15) / (
      (tmpvar_20 * (tmpvar_19 - tmpvar_15))
     + 
      (1.0 - tmpvar_20)
    )));
  };
  lineColor_3.w = (v_texcoord5.w * (clamp (s_14, 0.0, 1.0) * tmpvar_13.x));
  float s_21;
  float tmpvar_22;
  tmpvar_22 = (0.5 * (v_texcoord0.y + 1.0));
  vec2 tmpvar_23;
  tmpvar_23 = (v_color4.zw - v_color4.xy);
  float tmpvar_24;
  vec2 x_25;
  x_25 = (v_texcoord3.xy - (v_color4.xy + (
    clamp ((dot ((v_texcoord3.xy - v_color4.xy), tmpvar_23) / dot (tmpvar_23, tmpvar_23)), 0.0, 1.0)
   * tmpvar_23)));
  tmpvar_24 = sqrt(dot (x_25, x_25));
  s_21 = 1.0;
  if ((v_texcoord0.y < 1.0)) {
    s_21 = (v_texcoord0.y - max (0.0, (tmpvar_24 + 
      (0.5 * (v_texcoord0.y - 1.0))
    )));
  } else {
    float tmpvar_26;
    tmpvar_26 = max (0.0, (tmpvar_22 - 2.0));
    float tmpvar_27;
    tmpvar_27 = float((tmpvar_22 != tmpvar_26));
    s_21 = (tmpvar_27 * ((tmpvar_24 - tmpvar_22) / (
      (tmpvar_27 * (tmpvar_26 - tmpvar_22))
     + 
      (1.0 - tmpvar_27)
    )));
  };
  casingColor_2.w = (v_texcoord4.w * clamp (s_21, 0.0, 1.0));
  vec4 tmpvar_28;
  if ((casingColor_2.w == 0.0)) {
    tmpvar_28 = lineColor_3;
  } else {
    vec4 tmpvar_29;
    tmpvar_29.xyz = mix (v_texcoord4.xyz, v_texcoord5.xyz, lineColor_3.w);
    tmpvar_29.w = min (1.0, (casingColor_2.w + lineColor_3.w));
    tmpvar_28 = tmpvar_29;
  };
  fragColor_1.w = tmpvar_28.w;
  float tmpvar_30;
  tmpvar_30 = clamp (((v_color0.x - u_FogTransition.x) / (u_FogTransition.y - u_FogTransition.x)), 0.0, 1.0);
  fragColor_1.xyz = mix (tmpvar_28.xyz, u_FogColor.xyz, ((tmpvar_30 * 
    (tmpvar_30 * (3.0 - (2.0 * tmpvar_30)))
  ) * u_FogColor.w));
  vec4 tmpvar_31;
  tmpvar_31.xyz = fragColor_1.xyz;
  tmpvar_31.w = ((tmpvar_28.w * u_vectorFade.x) * v_color1.x);
  gl_FragData[0] = tmpvar_31;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
}

