varying vec4 v_color4;
varying vec4 v_texcoord0;
varying vec4 v_texcoord1;
varying vec4 v_texcoord2;
varying vec4 v_texcoord3;
varying vec4 v_texcoord4;
varying vec4 v_texcoord5;
varying vec4 v_texcoord6;
varying vec4 v_texcoord7;
uniform sampler2D s_heightTexture;
uniform vec4 s_heightTexture_Res;
uniform sampler2D s_sunShadowDepth;
uniform sampler2D s_SlopeAngleShadeTexture;
uniform sampler2D s_SlopeAspectShadeTexture;
uniform sampler2D s_texture0;
uniform samplerCube s_cubeDepth0;
uniform vec4 u_viewshedTint0;
uniform vec4 u_viewshedRingTint0;
uniform vec4 u_viewshedRange0;
uniform vec4 u_viewshedPos0;
uniform vec4 u_viewshedFarPlane0;
uniform vec4 u_viewshedInverted0;
uniform vec4 u_viewshedBias0;
uniform vec4 u_tileSize;
uniform vec4 u_lightStrengthPow;
uniform vec4 u_SunMinStrength;
uniform vec4 u_SunAmbient;
uniform vec4 u_sunShadowBias;
uniform vec4 u_sunShadowStrength;
uniform vec4 u_sunShadowVSMParams;
uniform vec4 u_CascadeDebug;
uniform vec4 u_MaxNormalZ;
uniform vec4 u_FogTransition;
uniform vec4 u_FogColor;
uniform vec4 u_ScaleOffsetTex0;
uniform vec4 u_OpacityTex0;
uniform vec4 u_BackgroundColor;
void main ()
{
  float d_1;
  vec2 projectedUV_2;
  vec4 fragColor_3;
  vec3 normal_4;
  float tmpvar_5;
  tmpvar_5 = ((0.5 * s_heightTexture_Res.z) / v_color4.z);
  vec2 tmpvar_6;
  tmpvar_6.y = 0.0;
  tmpvar_6.x = tmpvar_5;
  vec2 tmpvar_7;
  tmpvar_7 = (v_texcoord5.xy - tmpvar_6);
  vec2 tmpvar_8;
  tmpvar_8.y = 0.0;
  tmpvar_8.x = tmpvar_5;
  vec2 tmpvar_9;
  tmpvar_9 = (v_texcoord5.xy + tmpvar_8);
  vec2 tmpvar_10;
  tmpvar_10.x = 0.0;
  tmpvar_10.y = tmpvar_5;
  vec2 tmpvar_11;
  tmpvar_11 = (v_texcoord5.xy - tmpvar_10);
  vec2 tmpvar_12;
  tmpvar_12.x = 0.0;
  tmpvar_12.y = tmpvar_5;
  vec2 tmpvar_13;
  tmpvar_13 = (v_texcoord5.xy + tmpvar_12);
  vec3 tmpvar_14;
  tmpvar_14.x = ((texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_7)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_7.y)) - (texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_9)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_9.y)));
  tmpvar_14.y = ((texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_11)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_11.y)) - (texture2DLod (s_heightTexture, (
    (v_color4.zw * tmpvar_13)
   + v_color4.xy), 0.0).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_13.y)));
  tmpvar_14.z = (2.0 * (tmpvar_5 * u_tileSize.x));
  normal_4 = normalize(tmpvar_14);
  vec4 color_15;
  vec4 tmpvar_16;
  tmpvar_16 = texture2D (s_texture0, (u_ScaleOffsetTex0.xy + (v_texcoord5.xy * u_ScaleOffsetTex0.zw)));
  color_15.xyz = mix (u_BackgroundColor.xyz, tmpvar_16.xyz, (tmpvar_16.w * u_OpacityTex0.x));
  color_15.w = max (u_BackgroundColor.w, tmpvar_16.w);
  fragColor_3 = color_15;
  float rad_17;
  float vec_y_18;
  vec_y_18 = -(normal_4.y);
  float tmpvar_19;
  float tmpvar_20;
  tmpvar_20 = (min (abs(
    (vec_y_18 / normal_4.x)
  ), 1.0) / max (abs(
    (vec_y_18 / normal_4.x)
  ), 1.0));
  float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((vec_y_18 / normal_4.x)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((vec_y_18 / normal_4.x)));
  if ((abs(normal_4.x) > (1e-08 * abs(vec_y_18)))) {
    if ((normal_4.x < 0.0)) {
      if ((vec_y_18 >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(vec_y_18) * 1.570796);
  };
  rad_17 = (tmpvar_19 - 1.570796);
  rad_17 = (rad_17 + (float(
    (rad_17 < 0.0)
  ) * 6.283185));
  rad_17 = (6.283185 - rad_17);
  vec2 tmpvar_22;
  tmpvar_22.y = 0.0;
  tmpvar_22.x = (rad_17 / 6.283185);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (s_SlopeAspectShadeTexture, tmpvar_22);
  fragColor_3.xyz = mix (color_15.xyz, tmpvar_23.xyz, (tmpvar_23.w * float(
    (abs(normal_4.z) <= u_MaxNormalZ.x)
  )));
  vec3 tangentSun_24;
  vec3 planetNormal_25;
  float tmpvar_26;
  tmpvar_26 = (6.283185 * (v_texcoord2.x - 0.5));
  float tmpvar_27;
  tmpvar_27 = ((6.283185 * (
    (1.0 - v_texcoord2.y)
   - 0.5)) / 2.0);
  planetNormal_25.x = (cos(tmpvar_27) * cos(tmpvar_26));
  planetNormal_25.y = (cos(tmpvar_27) * sin(tmpvar_26));
  planetNormal_25.z = sin(tmpvar_27);
  vec3 tmpvar_28;
  tmpvar_28 = normalize(((planetNormal_25.yzx * vec3(0.0, 1.0, 0.0)) - (planetNormal_25.zxy * vec3(0.0, 0.0, 1.0))));
  tangentSun_24.x = -(dot (tmpvar_28, v_texcoord3.xyz));
  tangentSun_24.y = -(dot (normalize(
    ((planetNormal_25.yzx * tmpvar_28.zxy) - (planetNormal_25.zxy * tmpvar_28.yzx))
  ), v_texcoord3.xyz));
  tangentSun_24.z = dot (planetNormal_25, v_texcoord3.xyz);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = mix (vec3(clamp (dot (tangentSun_24, normal_4), 0.0, 1.0)), (vec3(0.75, 0.79, 1.0) * dot (
    ((normal_4 * 2.0) - 1.0)
  , vec3(0.1924501, 0.1924501, 0.9622505))), (0.5 * u_SunAmbient.x));
  vec4 tmpvar_30;
  tmpvar_30 = mix (fragColor_3, tmpvar_29, u_SunMinStrength.x);
  fragColor_3.w = tmpvar_30.w;
  float tmpvar_31;
  tmpvar_31 = (v_texcoord1.z - u_sunShadowBias.x);
  projectedUV_2 = (v_texcoord1.xy / v_texcoord1.w);
  projectedUV_2 = ((projectedUV_2 * 0.5) + 0.5);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (s_sunShadowDepth, projectedUV_2);
  float tmpvar_33;
  tmpvar_33 = max ((tmpvar_32.y - (tmpvar_32.x * tmpvar_32.x)), u_sunShadowVSMParams.x);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_31 - tmpvar_32.x);
  fragColor_3.xyz = mix (tmpvar_30.xyz, vec3(min (max (
    float((tmpvar_31 <= tmpvar_32.x))
  , 
    clamp ((((tmpvar_33 / 
      (tmpvar_33 + (tmpvar_34 * tmpvar_34))
    ) - u_sunShadowVSMParams.y) / (1.0 - u_sunShadowVSMParams.y)), 0.0, 1.0)
  ), 1.0)), u_sunShadowStrength.x);
  if ((u_CascadeDebug.x > 0.5)) {
    fragColor_3.xyz = texture2D (s_sunShadowDepth, projectedUV_2).xyz;
  };
  vec2 tmpvar_35;
  tmpvar_35.y = 0.0;
  tmpvar_35.x = ((1.570796 - (
    sign(normal_4.z)
   * 
    (1.570796 - (sqrt((1.0 - 
      abs(normal_4.z)
    )) * (1.570796 + (
      abs(normal_4.z)
     * 
      (-0.2146018 + (abs(normal_4.z) * (0.08656672 + (
        abs(normal_4.z)
       * -0.03102955))))
    ))))
  )) / 1.570796);
  vec4 tmpvar_36;
  tmpvar_36 = texture2D (s_SlopeAngleShadeTexture, tmpvar_35);
  fragColor_3.xyz = mix (fragColor_3.xyz, tmpvar_36.xyz, tmpvar_36.w);
  float tmpvar_37;
  vec3 tmpvar_38;
  tmpvar_38 = (v_texcoord7.xyz - u_viewshedPos0.xyz);
  tmpvar_37 = sqrt(dot (tmpvar_38, tmpvar_38));
  vec3 rayDir_39;
  rayDir_39.xz = tmpvar_38.xz;
  rayDir_39.y = -(tmpvar_38.y);
  fragColor_3.xyz = mix (fragColor_3.xyz, ((
    ((fragColor_3.x + fragColor_3.y) + fragColor_3.z)
   / 3.0) * u_viewshedTint0.xyz), ((
    float((tmpvar_37 < u_viewshedRange0.x))
   * 
    abs((u_viewshedInverted0.x - float((
      (tmpvar_37 - u_viewshedBias0.x)
     < 
      (textureCube (s_cubeDepth0, rayDir_39).x * u_viewshedFarPlane0.x)
    ))))
  ) * u_viewshedTint0.w));
  float tmpvar_40;
  tmpvar_40 = sqrt(dot (tmpvar_38, tmpvar_38));
  float period_41;
  period_41 = (u_viewshedRange0.x / 4.0);
  float tmpvar_42;
  tmpvar_42 = ((1.0/(period_41)) * tmpvar_40);
  float tmpvar_43;
  tmpvar_43 = (0.5 * period_41);
  float tmpvar_44;
  tmpvar_44 = (50.0 * tmpvar_40);
  vec4 tmpvar_45;
  tmpvar_45.xyz = mix (fragColor_3.xyz, u_viewshedRingTint0.xyz, u_viewshedRingTint0.w);
  tmpvar_45.w = u_viewshedRingTint0.w;
  fragColor_3.xyz = mix (fragColor_3.xyz, tmpvar_45.xyz, ((
    (1.0 - min (((0.6666667 * 
      abs((fract((tmpvar_42 - 0.5)) - 0.5))
    ) / (
      abs(dFdx(tmpvar_42))
     + 
      abs(dFdy(tmpvar_42))
    )), 1.0))
   * 
    (float((-(tmpvar_43) <= tmpvar_40)) * float((tmpvar_40 <= (u_viewshedRange0.x + tmpvar_43))))
  ) + (
    (1.0 - min (((0.6666667 * 
      abs((fract((tmpvar_44 - 0.5)) - 0.5))
    ) / (
      abs(dFdx(tmpvar_44))
     + 
      abs(dFdy(tmpvar_44))
    )), 1.0))
   * 
    (float((-0.01 <= tmpvar_40)) * float((tmpvar_40 <= 0.09)))
  )));
  float tmpvar_46;
  tmpvar_46 = clamp (((v_texcoord4.x - u_FogTransition.x) / (u_FogTransition.y - u_FogTransition.x)), 0.0, 1.0);
  fragColor_3.xyz = mix (fragColor_3.xyz, u_FogColor.xyz, ((tmpvar_46 * 
    (tmpvar_46 * (3.0 - (2.0 * tmpvar_46)))
  ) * u_FogColor.w));
  gl_FragData[0] = fragColor_3;
  float tmpvar_47;
  tmpvar_47 = (((
    (v_texcoord6.z / v_texcoord6.w)
   * 0.5) + 0.5) * 256.0);
  float tmpvar_48;
  tmpvar_48 = floor(tmpvar_47);
  d_1 = ((tmpvar_47 - tmpvar_48) * 256.0);
  float tmpvar_49;
  tmpvar_49 = floor(d_1);
  d_1 = ((d_1 - tmpvar_49) * 256.0);
  vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.x = (tmpvar_48 / 256.0);
  tmpvar_50.y = (tmpvar_49 / 256.0);
  tmpvar_50.z = (floor(d_1) / 256.0);
  gl_FragData[1] = tmpvar_50;
  vec3 tmpvar_51;
  tmpvar_51 = normalize(-(v_texcoord7.xyz));
  vec3 tmpvar_52;
  tmpvar_52.x = (tmpvar_51.y * 0.5);
  tmpvar_52.y = (-(tmpvar_51.x) * 0.5);
  tmpvar_52.z = max ((0.7 * (1.0 - 
    max (0.0, tmpvar_51.z)
  )), 0.2);
  gl_FragData[0].xyz = (gl_FragData[0].xyz + ((
    (pow (min (max (
      dot (normalize(((
        (2.0 * normal_4)
       * 
        dot (normal_4, tmpvar_52)
      ) - tmpvar_52)), tmpvar_51)
    , 0.0), 1.0), u_lightStrengthPow.y) * u_lightStrengthPow.x)
   * 
    ((1.8 * (1.0 - max (0.0, normal_4.z))) + 0.1)
  ) * min (
    max (((-(v_texcoord7.z) - 5.0) / 100.0), 0.0)
  , 1.0)));
}

