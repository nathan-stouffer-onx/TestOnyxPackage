varying vec4 v_color4;
varying vec4 v_texcoord0;
varying vec4 v_texcoord1;
varying vec4 v_texcoord2;
varying vec4 v_texcoord3;
varying vec4 v_texcoord4;
varying vec4 v_texcoord5;
varying vec4 v_texcoord6;
varying vec4 v_texcoord7;
uniform sampler2D s_heightTexture;
uniform vec4 s_heightTexture_Res;
uniform sampler2D s_sunShadowDepth;
uniform sampler2D s_ElevationShadeTexture;
uniform vec4 s_ElevationShadeTexture_Res;
uniform sampler2D s_texture0;
uniform sampler2D s_texture1;
uniform sampler2D s_texture2;
uniform samplerCube s_cubeDepth0;
uniform vec4 u_viewshedTint0;
uniform vec4 u_viewshedRingTint0;
uniform vec4 u_viewshedRange0;
uniform vec4 u_viewshedPos0;
uniform vec4 u_viewshedFarPlane0;
uniform vec4 u_viewshedInverted0;
uniform vec4 u_viewshedBias0;
uniform vec4 u_heightTileSize;
uniform vec4 u_lightStrengthPow;
uniform vec4 u_ContourParams0;
uniform vec4 u_ContourColor0;
uniform vec4 u_ContourParams1;
uniform vec4 u_ContourColor1;
uniform vec4 u_ContourFade;
uniform vec4 u_SunMinStrength;
uniform vec4 u_SunAmbient;
uniform vec4 u_sunShadowBias;
uniform vec4 u_sunShadowStrength;
uniform vec4 u_sunShadowVSMParams;
uniform vec4 u_CascadeDebug;
uniform vec4 u_ElevationExtents;
uniform vec4 u_FogTransition;
uniform vec4 u_FogColor;
uniform vec4 u_ScaleOffsetTex0;
uniform vec4 u_OpacityTex0;
uniform vec4 u_ScaleOffsetTex1;
uniform vec4 u_OpacityTex1;
uniform vec4 u_ScaleOffsetTex2;
uniform vec4 u_OpacityTex2;
uniform vec4 u_BackgroundColor;
uniform vec4 u_nearFarPlane;
uniform vec4 u_eyePos;
void main ()
{
  float d_1;
  vec2 projectedUV_2;
  vec4 fragColor_3;
  vec3 normal_4;
  vec2 tmpvar_5;
  tmpvar_5 = (s_heightTexture_Res.zw / v_color4.z);
  vec2 tmpvar_6;
  tmpvar_6.y = 0.0;
  tmpvar_6.x = tmpvar_5.x;
  vec2 tmpvar_7;
  tmpvar_7 = (v_texcoord5.xy - tmpvar_6);
  vec2 tmpvar_8;
  tmpvar_8.y = 0.0;
  tmpvar_8.x = tmpvar_5.x;
  vec2 tmpvar_9;
  tmpvar_9 = (v_texcoord5.xy + tmpvar_8);
  vec2 tmpvar_10;
  tmpvar_10.x = 0.0;
  tmpvar_10.y = tmpvar_5.y;
  vec2 tmpvar_11;
  tmpvar_11 = (v_texcoord5.xy - tmpvar_10);
  vec2 tmpvar_12;
  tmpvar_12.x = 0.0;
  tmpvar_12.y = tmpvar_5.y;
  vec2 tmpvar_13;
  tmpvar_13 = (v_texcoord5.xy + tmpvar_12);
  float tmpvar_14;
  tmpvar_14 = (texture2D (s_heightTexture, ((v_color4.zw * v_texcoord5.xy) + v_color4.xy)).x * mix (v_texcoord0.x, v_texcoord0.y, v_texcoord5.y));
  vec2 tmpvar_15;
  tmpvar_15 = (u_heightTileSize.xy / 256.0);
  vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.x);
  tmpvar_16.z = ((texture2D (s_heightTexture, (
    (v_color4.zw * tmpvar_7)
   + v_color4.xy)).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_7.y)) - tmpvar_14);
  vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_15.x;
  tmpvar_17.z = ((texture2D (s_heightTexture, (
    (v_color4.zw * tmpvar_9)
   + v_color4.xy)).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_9.y)) - tmpvar_14);
  vec3 tmpvar_18;
  tmpvar_18.x = 0.0;
  tmpvar_18.y = -(tmpvar_15.y);
  tmpvar_18.z = ((texture2D (s_heightTexture, (
    (v_color4.zw * tmpvar_11)
   + v_color4.xy)).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_11.y)) - tmpvar_14);
  vec3 tmpvar_19;
  tmpvar_19.x = 0.0;
  tmpvar_19.y = tmpvar_15.y;
  tmpvar_19.z = ((texture2D (s_heightTexture, (
    (v_color4.zw * tmpvar_13)
   + v_color4.xy)).x * mix (v_texcoord0.x, v_texcoord0.y, tmpvar_13.y)) - tmpvar_14);
  normal_4 = normalize(((
    (((tmpvar_16.yzx * tmpvar_18.zxy) - (tmpvar_16.zxy * tmpvar_18.yzx)) + ((tmpvar_18.yzx * tmpvar_17.zxy) - (tmpvar_18.zxy * tmpvar_17.yzx)))
   + 
    ((tmpvar_17.yzx * tmpvar_19.zxy) - (tmpvar_17.zxy * tmpvar_19.yzx))
  ) + (
    (tmpvar_19.yzx * tmpvar_16.zxy)
   - 
    (tmpvar_19.zxy * tmpvar_16.yzx)
  )));
  vec4 color_20;
  vec4 tmpvar_21;
  tmpvar_21 = texture2D (s_texture0, (u_ScaleOffsetTex0.xy + (v_texcoord5.xy * u_ScaleOffsetTex0.zw)));
  color_20.xyz = mix (u_BackgroundColor.xyz, tmpvar_21.xyz, (tmpvar_21.w * u_OpacityTex0.x));
  color_20.w = max (u_BackgroundColor.w, tmpvar_21.w);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (s_texture1, (u_ScaleOffsetTex1.xy + (v_texcoord5.xy * u_ScaleOffsetTex1.zw)));
  color_20.xyz = mix (color_20.xyz, tmpvar_22.xyz, (tmpvar_22.w * u_OpacityTex1.x));
  color_20.w = max (color_20.w, tmpvar_22.w);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (s_texture2, (u_ScaleOffsetTex2.xy + (v_texcoord5.xy * u_ScaleOffsetTex2.zw)));
  color_20.xyz = mix (color_20.xyz, tmpvar_23.xyz, (tmpvar_23.w * u_OpacityTex2.x));
  color_20.w = max (color_20.w, tmpvar_23.w);
  vec3 tangentSun_24;
  vec3 planetNormal_25;
  float tmpvar_26;
  tmpvar_26 = (6.283185 * (v_texcoord2.x - 0.5));
  float tmpvar_27;
  tmpvar_27 = ((6.283185 * (
    (1.0 - v_texcoord2.y)
   - 0.5)) / 2.0);
  planetNormal_25.x = (cos(tmpvar_27) * cos(tmpvar_26));
  planetNormal_25.y = (cos(tmpvar_27) * sin(tmpvar_26));
  planetNormal_25.z = sin(tmpvar_27);
  vec3 tmpvar_28;
  tmpvar_28 = normalize(((planetNormal_25.yzx * vec3(0.0, 1.0, 0.0)) - (planetNormal_25.zxy * vec3(0.0, 0.0, 1.0))));
  tangentSun_24.x = -(dot (tmpvar_28, v_texcoord3.xyz));
  tangentSun_24.y = -(dot (normalize(
    ((planetNormal_25.yzx * tmpvar_28.zxy) - (planetNormal_25.zxy * tmpvar_28.yzx))
  ), v_texcoord3.xyz));
  tangentSun_24.z = dot (planetNormal_25, v_texcoord3.xyz);
  vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = mix (vec3(clamp (dot (tangentSun_24, normal_4), 0.0, 1.0)), (vec3(0.75, 0.79, 1.0) * dot (
    ((normal_4 * 2.0) - 1.0)
  , vec3(0.1924501, 0.1924501, 0.9622505))), (0.5 * u_SunAmbient.x));
  vec4 tmpvar_30;
  tmpvar_30 = mix (color_20, tmpvar_29, u_SunMinStrength.x);
  fragColor_3.w = tmpvar_30.w;
  float tmpvar_31;
  tmpvar_31 = (v_texcoord1.z - u_sunShadowBias.x);
  projectedUV_2 = (v_texcoord1.xy / v_texcoord1.w);
  projectedUV_2 = ((projectedUV_2 * 0.5) + 0.5);
  vec4 tmpvar_32;
  tmpvar_32 = texture2D (s_sunShadowDepth, projectedUV_2);
  float tmpvar_33;
  tmpvar_33 = max ((tmpvar_32.y - (tmpvar_32.x * tmpvar_32.x)), u_sunShadowVSMParams.x);
  float tmpvar_34;
  tmpvar_34 = (tmpvar_31 - tmpvar_32.x);
  fragColor_3.xyz = mix (tmpvar_30.xyz, vec3(min (max (
    float((tmpvar_31 <= tmpvar_32.x))
  , 
    clamp ((((tmpvar_33 / 
      (tmpvar_33 + (tmpvar_34 * tmpvar_34))
    ) - u_sunShadowVSMParams.y) / (1.0 - u_sunShadowVSMParams.y)), 0.0, 1.0)
  ), 1.0)), u_sunShadowStrength.x);
  if ((u_CascadeDebug.x > 0.5)) {
    fragColor_3.xyz = texture2D (s_sunShadowDepth, projectedUV_2).xyz;
  };
  float tmpvar_35;
  tmpvar_35 = float((u_ElevationExtents.x != u_ElevationExtents.y));
  float tmpvar_36;
  float tmpvar_37;
  tmpvar_37 = (v_texcoord7.w + u_eyePos.z);
  tmpvar_36 = (((tmpvar_35 * 
    ((tmpvar_37 - u_ElevationExtents.x) / ((tmpvar_35 * (u_ElevationExtents.y - u_ElevationExtents.x)) + (1.0 - tmpvar_35)))
  ) * s_ElevationShadeTexture_Res.x) * s_ElevationShadeTexture_Res.y);
  vec2 tmpvar_38;
  tmpvar_38.x = (float(mod (tmpvar_36, s_ElevationShadeTexture_Res.x)));
  tmpvar_38.y = floor((tmpvar_36 / s_ElevationShadeTexture_Res.y));
  vec4 tmpvar_39;
  tmpvar_39 = texture2D (s_ElevationShadeTexture, (tmpvar_38 / s_ElevationShadeTexture_Res.xy));
  fragColor_3.xyz = mix (fragColor_3.xyz, tmpvar_39.xyz, tmpvar_39.w);
  float tmpvar_40;
  tmpvar_40 = clamp (((
    (sqrt(dot (v_texcoord7.xyz, v_texcoord7.xyz)) / u_nearFarPlane.y)
   - u_ContourFade.x) / (u_ContourFade.y - u_ContourFade.x)), 0.0, 1.0);
  float tmpvar_41;
  tmpvar_41 = (1.0 - (tmpvar_40 * (tmpvar_40 * 
    (3.0 - (2.0 * tmpvar_40))
  )));
  float tmpvar_42;
  tmpvar_42 = ((1.0/(u_ContourParams0.x)) * tmpvar_37);
  float tmpvar_43;
  tmpvar_43 = (0.5 * u_ContourParams0.x);
  fragColor_3.xyz = mix (fragColor_3.xyz, mix (fragColor_3.xyz, u_ContourColor0.xyz, u_ContourColor0.w), (clamp (
    (pow (((
      (1.0 - min (((
        (1.0/(u_ContourParams0.w))
       * 
        abs((fract((tmpvar_42 - 0.5)) - 0.5))
      ) / (
        abs(dFdx(tmpvar_42))
       + 
        abs(dFdy(tmpvar_42))
      )), 1.0))
     * 
      (float(((u_ContourParams0.y - tmpvar_43) <= tmpvar_37)) * float((tmpvar_37 <= (u_ContourParams0.z + tmpvar_43))))
    ) + 0.5), 3.0) - 0.5)
  , 0.0, 1.0) * tmpvar_41));
  float tmpvar_44;
  tmpvar_44 = ((1.0/(u_ContourParams1.x)) * tmpvar_37);
  float tmpvar_45;
  tmpvar_45 = (0.5 * u_ContourParams1.x);
  fragColor_3.xyz = mix (fragColor_3.xyz, mix (fragColor_3.xyz, u_ContourColor1.xyz, u_ContourColor1.w), (clamp (
    (pow (((
      (1.0 - min (((
        (1.0/(u_ContourParams1.w))
       * 
        abs((fract((tmpvar_44 - 0.5)) - 0.5))
      ) / (
        abs(dFdx(tmpvar_44))
       + 
        abs(dFdy(tmpvar_44))
      )), 1.0))
     * 
      (float(((u_ContourParams1.y - tmpvar_45) <= tmpvar_37)) * float((tmpvar_37 <= (u_ContourParams1.z + tmpvar_45))))
    ) + 0.5), 3.0) - 0.5)
  , 0.0, 1.0) * tmpvar_41));
  float tmpvar_46;
  vec3 tmpvar_47;
  tmpvar_47 = (v_texcoord7.xyz - u_viewshedPos0.xyz);
  tmpvar_46 = sqrt(dot (tmpvar_47, tmpvar_47));
  vec3 rayDir_48;
  rayDir_48.xz = tmpvar_47.xz;
  rayDir_48.y = -(tmpvar_47.y);
  fragColor_3.xyz = mix (fragColor_3.xyz, ((
    ((fragColor_3.x + fragColor_3.y) + fragColor_3.z)
   / 3.0) * u_viewshedTint0.xyz), ((
    float((tmpvar_46 < u_viewshedRange0.x))
   * 
    abs((u_viewshedInverted0.x - float((
      (tmpvar_46 - u_viewshedBias0.x)
     < 
      (textureCube (s_cubeDepth0, rayDir_48).x * u_viewshedFarPlane0.x)
    ))))
  ) * u_viewshedTint0.w));
  float tmpvar_49;
  tmpvar_49 = sqrt(dot (tmpvar_47, tmpvar_47));
  float period_50;
  period_50 = (u_viewshedRange0.x / 4.0);
  float tmpvar_51;
  tmpvar_51 = ((1.0/(period_50)) * tmpvar_49);
  float tmpvar_52;
  tmpvar_52 = (0.5 * period_50);
  float tmpvar_53;
  tmpvar_53 = (50.0 * tmpvar_49);
  vec4 tmpvar_54;
  tmpvar_54.xyz = mix (fragColor_3.xyz, u_viewshedRingTint0.xyz, u_viewshedRingTint0.w);
  tmpvar_54.w = u_viewshedRingTint0.w;
  fragColor_3.xyz = mix (fragColor_3.xyz, tmpvar_54.xyz, ((
    (1.0 - min (((0.6666667 * 
      abs((fract((tmpvar_51 - 0.5)) - 0.5))
    ) / (
      abs(dFdx(tmpvar_51))
     + 
      abs(dFdy(tmpvar_51))
    )), 1.0))
   * 
    (float((-(tmpvar_52) <= tmpvar_49)) * float((tmpvar_49 <= (u_viewshedRange0.x + tmpvar_52))))
  ) + (
    (1.0 - min (((0.6666667 * 
      abs((fract((tmpvar_53 - 0.5)) - 0.5))
    ) / (
      abs(dFdx(tmpvar_53))
     + 
      abs(dFdy(tmpvar_53))
    )), 1.0))
   * 
    (float((-0.01 <= tmpvar_49)) * float((tmpvar_49 <= 0.09)))
  )));
  float tmpvar_55;
  tmpvar_55 = clamp (((v_texcoord4.x - u_FogTransition.x) / (u_FogTransition.y - u_FogTransition.x)), 0.0, 1.0);
  fragColor_3.xyz = mix (fragColor_3.xyz, u_FogColor.xyz, (tmpvar_55 * (tmpvar_55 * 
    (3.0 - (2.0 * tmpvar_55))
  )));
  gl_FragData[0] = fragColor_3;
  float tmpvar_56;
  tmpvar_56 = (((
    (v_texcoord6.z / v_texcoord6.w)
   * 0.5) + 0.5) * 256.0);
  float tmpvar_57;
  tmpvar_57 = floor(tmpvar_56);
  d_1 = ((tmpvar_56 - tmpvar_57) * 256.0);
  float tmpvar_58;
  tmpvar_58 = floor(d_1);
  d_1 = ((d_1 - tmpvar_58) * 256.0);
  vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.x = (tmpvar_57 / 256.0);
  tmpvar_59.y = (tmpvar_58 / 256.0);
  tmpvar_59.z = (floor(d_1) / 256.0);
  gl_FragData[1] = tmpvar_59;
  vec3 tmpvar_60;
  tmpvar_60 = normalize(-(v_texcoord7.xyz));
  vec3 tmpvar_61;
  tmpvar_61.x = (tmpvar_60.y * 0.5);
  tmpvar_61.y = (-(tmpvar_60.x) * 0.5);
  tmpvar_61.z = max ((0.7 * (1.0 - 
    max (0.0, tmpvar_60.z)
  )), 0.2);
  gl_FragData[0].xyz = (gl_FragData[0].xyz + ((
    (pow (min (max (
      dot (normalize(((
        (2.0 * normal_4)
       * 
        dot (normal_4, tmpvar_61)
      ) - tmpvar_61)), tmpvar_60)
    , 0.0), 1.0), u_lightStrengthPow.y) * u_lightStrengthPow.x)
   * 
    ((1.8 * (1.0 - max (0.0, normal_4.z))) + 0.1)
  ) * min (
    max (((-(v_texcoord7.z) - 5.0) / 100.0), 0.0)
  , 1.0)));
}

