{
  "inputs": [
    {
      "name": "position",
      "type": "VEC3"
    },
    {
      "name": "u_p1p2",
      "type": "VEC4",
      "instanced": true
    },
    {
      "name": "u_PrevNext",
      "type": "VEC4",
      "instanced": true
    },
    {
      "name": "u_params",
      "type": "VEC4",
      "instanced": true
    }
  ],
  "transfers": [
    {
      "name": "tilePosition",
      "type": "VEC2"
    },
    {
      "name": "linePosition",
      "type": "VEC4"
    },
    {
      "name": "lineColor",
      "type": "VEC4"
    },
    {
      "name": "casingColor",
      "type": "VEC4"
    },
    {
      "name": "screenPosition",
      "type": "VEC2"
    },
    {
      "name": "dashRow",
      "type": "FLOAT"
    },
    {
      "name": "texcoords",
      "type": "VEC3"
    },
    {
      "name": "jointNormals",
      "type": "VEC4"
    },
    {
      "name": "line_dir",
      "type": "VEC2"
    },
    {
      "name": "line_side",
      "type": "VEC2"
    },
    {
      "name": "line_width",
      "type": "VEC4"
    },
    {
      "name": "line_endPointsScreen",
      "type": "VEC4"
    },
    {
      "name": "phaseParams",
      "type": "VEC3"
    },
    {
      "name": "line_endFlags",
      "type": "VEC2"
    },
    {
      "name": "distFade",
      "type": "FLOAT"
    }
  ],
  "chunks": [
    {
      "lines": [
        "#include <common.sh>",
        "#include <math.sc>"
      ],
      "section": "INCLUDES",
      "shaders": "VERTEX_AND_FRAGMENT"
    },
    {
      "lines": [
        "#include <derivatives.sc>"
      ],
      "section": "INCLUDES",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "vec4 toScreenCoords(vec4 projected, vec2 dimensions)",
        "{",
        "vec4 screen = projected / projected.w;",
        "screen.xy = screen.xy * 0.5 + 0.5;",
        "screen.xy *= dimensions;",
        "return screen;",
        "}"
      ],
      "section": "FUNCTIONS",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "// we assume u and v to be normal vectors",
        "vec2 jointBisector(vec2 u, vec2 v)",
        "{",
        "float theta = atan2(u.y, u.x);",
        "float phi = atan2(v.y, v.x);",
        "float alpha = 0.5 * (theta + phi);",
        "return vec2(cos(alpha), sin(alpha));",
        "}"
      ],
      "section": "FUNCTIONS",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "float LineStrength(vec2 p, vec2 a, vec2 b, float w)",
        "{",
        "float d_max = 0.5 * (w + 1.0); // furthest distance from the line that should have any strength",
        "float window = 2.0; // number of pixels used to transition from full strength to no strength",
        "Segment seg = segment(a, b);",
        "float d = distanceTo(seg, p); // compute distance from pixel position to line segment",
        "// compute strength -- use different functions based on line width",
        "float s = 1.0;",
        "if (w < 1.0) { s = w - max(0.0, d + 0.5 * (w - 1.0)); }",
        "else { s = lerpInv(d_max, max(0.0, d_max - window), d); }",
        "return clamp(s, 0.0, 1.0);",
        "}"
      ],
      "section": "FUNCTIONS",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "float DashStrength(float v, vec2 length, float t, float width)",
        "{",
        "vec2 pixelWidth = 1.0 / s_DashPatternsRes.xy;",
        "v += 0.5 * pixelWidth.y;",
        "float period = floor(texture2D(s_DashPatterns, vec2(0.0, v)).x * (s_DashPatternsRes.x - 1.0) + 0.5);",
        "float l = mix(length.x, length.y, t);",
        "float rasterized = l * 256.0 / max(1.0, floor(width));",
        "float position = mod(rasterized, period);",
        "float u = (position + 1.0) / s_DashPatternsRes.x;",
        "float strength = texture2D(s_DashPatterns, vec2(u, v)).x;",
        "return strength;",
        "}"
      ],
      "section": "FUNCTIONS",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "float cMaxLineWidth = 64.0; // analogous value in LineStyleAtlas.cpp",
        "vec2 texParams = u_params.zw;",
        "vec4 lineColor = texture2DLod(s_LineColors, texParams, 0);",
        "vec4 casingColor = texture2DLod(s_CasingColors, texParams, 0);",
        "vec4 lineWidth = texture2DLod(s_Widths, texParams, 0) * cMaxLineWidth;",
        "float dashRow = texture2DLod(s_DashCoords, texParams, 0).r;",
        "vec3 phaseParams = vec3(u_params.xy, lineWidth.x);",
        "vec2 p1 = u_p1p2.xy;",
        "vec2 p2 = u_p1p2.zw;"
      ],
      "section": "INITIALIZE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "// declare tile positions and their corresponding z values",
        "vec2 tileP1 = mix(u_TileMin.xy, u_TileMax.xy, p1.xy);",
        "vec2 tileP2 = mix(u_TileMin.xy, u_TileMax.xy, p2.xy);",
        "vec2 prevTP = mix(u_TileMin.xy, u_TileMax.xy, u_PrevNext.xy);",
        "vec2 nextTP = mix(u_TileMin.xy, u_TileMax.xy, u_PrevNext.zw);",
        "float tileZ1 = u_TileMin.z;",
        "float tileZ2 = u_TileMin.z;",
        "float prevZ = u_TileMin.z;",
        "float nextZ = u_TileMin.z;",
        "float z1Offset = u_PackedParams.x;",
        "float z2Offset = u_PackedParams.x;",
        "float prevZOffset = u_PackedParams.x;",
        "float nextZOffset = u_PackedParams.x;",
        "vec2 tilePos = mix(p1, p2, position.y);"
      ],
      "section": "INITIALIZE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "vec3 texcoords = vec3(position.xy, 0);",
        "float lineLengthSoFar = position.z;",
        "float endA = 1.0 - texcoords.y; //uv.y is 0 for this one, so make it 1.0",
        "float endB = texcoords.y; //uv.y is 1 for this one"
      ],
      "section": "INITIALIZE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "// convert to screen space and expand the line",
        "vec3 wp1 = vec3(tileP1, tileZ1 + z1Offset);",
        "vec3 wp2 = vec3(tileP2, tileZ2 + z2Offset);",
        "vec3 worldPosition = mix(wp1.xyz, wp2.xyz, position.y); // write to this variable so fog works correctly",
        "float distToEye = length(worldPosition);",
        "vec3 fromEye = normalize(worldPosition);",
        "float biasKm = max(0.020, max((2.0 / 256.0) * (u_TileMax.x - u_TileMin.x), 0.004 * u_NearFarFocus.z));",
        "wp1 *= max(0.5, 1.0 - biasKm / length(wp1));",
        "wp2 *= max(0.5, 1.0 - biasKm / length(wp2));",
        "vec4 screen1 = mul(u_viewProj, vec4(wp1, 1.0));",
        "vec4 screen2 = mul(u_viewProj, vec4(wp2, 1.0));",
        "float origW = mix(screen1.w, screen2.w, position.y);",
        "screen1 = toScreenCoords(screen1, u_viewRect.zw);",
        "screen2 = toScreenCoords(screen2, u_viewRect.zw);",
        "vec4 line_endPointsScreen = vec4(screen1.xy, screen2.xy);",
        "vec4 transformPosition = mix(screen1, screen2, position.y);",
        "vec3 screenPos = transformPosition.xyz / transformPosition.w;",
        "vec2 lineDirection = screen2.xy - screen1.xy;",
        "float lineLength = length(lineDirection);",
        "lineDirection /= lineLength;",
        "vec2 lineSide = normalize(vec2(-lineDirection.y, lineDirection.x));",
        "vec4 line_width = lineWidth;",
        "line_width *= min(1.0, u_NearFarFocus.z / length(worldPosition.xyz)); // scale based on distance",
        "float widthExpansion = 0.5 * (max(line_width.x, line_width.y) + 2.0); // compute expansion factor",
        "screenPos.xy += lineSide * texcoords.x * widthExpansion;",
        "// overlap ends for the pixel miter",
        "vec2 endExpansion = (-lineDirection * endA * widthExpansion + lineDirection * endB * widthExpansion);",
        "screenPos.xy += endExpansion;",
        "// adjust depth because we expand the vertex from it's true location in screen space",
        "float deltaZ = screen2.z - screen1.z;",
        "float depthAdjustment = widthExpansion * deltaZ / lineLength;",
        "screenPos.z -= endA * depthAdjustment;",
        "screenPos.z += endB * depthAdjustment;",
        "// adjust line length because we expand the vertex from it's true location in screen space",
        "float deltaPhase = phaseParams.y - phaseParams.x;",
        "float phaseAdjustment = widthExpansion * deltaPhase / lineLength;",
        "phaseParams.x -= phaseAdjustment;",
        "phaseParams.y += phaseAdjustment;",
        "vec2 line_endFlags = u_PrevNext.xz;",
        "vec3 prevPos = vec3(prevTP, prevZ + prevZOffset);",
        "vec3 nextPos = vec3(nextTP, nextZ + nextZOffset);",
        "vec2 screenPrev = toScreenCoords(mul(u_viewProj, vec4(prevPos, 1.0)), u_viewRect.zw).xy;",
        "vec2 screenNext = toScreenCoords(mul(u_viewProj, vec4(nextPos, 1.0)), u_viewRect.zw).xy;",
        "vec2 prevDir = normalize(screenPrev.xy - screen1.xy);",
        "vec2 nextDir = normalize(screenNext.xy - screen2.xy);",
        "if (u_PrevNext.x < -9999.0) prevDir = lineDirection;",
        "if (u_PrevNext.z < -9999.0) nextDir = -lineDirection;",
        "vec2 jointADir = jointBisector(prevDir, lineDirection);",
        "vec2 jointBDir = jointBisector(-lineDirection, nextDir);",
        "// bias the joint normals in opposite directions",
        "vec2 jointANormal = vec2(-jointADir.y, jointADir.x);",
        "vec2 jointBNormal = vec2(jointBDir.y, -jointBDir.x);",
        "// compute similarity between normals and the appropriate line direction",
        "float similarityA = dot(jointANormal, lineDirection);",
        "float similarityB = dot(jointBNormal, -lineDirection);",
        "// calculate if the normals are facing towards the center of the line (with some floating point error), and flip if not",
        "float flipA = sign(similarityA) * float(abs(similarityA) > 0.001);",
        "float flipB = sign(similarityB) * float(abs(similarityB) > 0.001);",
        "// pass over the joint normal vectors for the mitered ends",
        "vec4 jointNormals = vec4(flipA * jointANormal, flipB * jointBNormal);",
        "float end = texcoords.y;",
        "texcoords.y *= lineLength / widthExpansion;",
        "texcoords.y += sign(end - 0.5) * length(endExpansion) / widthExpansion;",
        "texcoords.z = lineLength / widthExpansion;",
        "vec2 line_dir = lineDirection;",
        "vec2 line_side = lineSide;"
      ],
      "section": "STRUCTURE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "float distFade = 1.0 - smoothstep(u_Opacity.x, u_Opacity.y, distToEye);"
      ],
      "section": "COMPOSE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "float lineEdgeOffsetDist = lineWidth.x * 0.5;",
        "vec2 screenPosition = screenPos.xy;",
        "vec4 linePosition = vec4(position, lineWidth.x);"
      ],
      "section": "COMPOSE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "vec2 tilePosition = tilePos;",
        "// convert from screen position back to clip space position",
        "vec4 glPos = vec4(screenPos.xyz, 1.0);",
        "glPos.xy *= u_viewTexel.xy;",
        "glPos.xy = glPos.xy * 2.0 - 1.0;",
        "glPos.xyz *= origW;",
        "glPos.w = origW;",
        "gl_Position = glPos;"
      ],
      "section": "COMPOSE",
      "shaders": "VERTEX"
    },
    {
      "lines": [
        "// discard fragments that are outside the tile",
        "float inX = inRange(tilePosition.x, u_FragClip.x, u_FragClip.z);",
        "float inY = inRange(tilePosition.y, u_FragClip.y, u_FragClip.w);",
        "if (inX * inY == 0.0) { discard; }"
      ],
      "section": "INITIALIZE",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "// clip off the ends of the corners to make the mitered joints",
        "vec2 fromEndA = screenPosition - line_endPointsScreen.xy;",
        "vec2 fromEndB = screenPosition - line_endPointsScreen.zw;",
        "bool clipA = dot(fromEndA, jointNormals.xy) < 0.0;",
        "bool clipB = dot(fromEndB, jointNormals.zw) < 0.0;",
        "bool isEndA = line_endFlags.x > -999999.0;",
        "bool isEndB = line_endFlags.y > -999999.0;",
        "if ((clipA && isEndA) || (clipB && isEndB)) { discard; }"
      ],
      "section": "INITIALIZE",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "// compute line color",
        "float dashStrength = DashStrength(dashRow, phaseParams.xy, linePosition.y, phaseParams.z);",
        "float strength = LineStrength(screenPosition, line_endPointsScreen.xy, line_endPointsScreen.zw, line_width.x);",
        "lineColor.a *= strength * dashStrength;",
        "// compute line casing",
        "float casingStrength = LineStrength(screenPosition, line_endPointsScreen.xy, line_endPointsScreen.zw, line_width.y);",
        "casingColor.a *= casingStrength;",
        "// compute fragment color",
        "vec4 fragColor = (casingColor.a == 0.0) ? lineColor : vec4(mix(casingColor.rgb, lineColor.rgb, lineColor.a), min(1.0, casingColor.a + lineColor.a));"
      ],
      "section": "LIGHTING",
      "shaders": "FRAGMENT"
    },
    {
      "lines": [
        "gl_FragColor = vec4(fragColor.rgb, fragColor.a * u_Opacity.z * distFade);"
      ],
      "section": "COMPOSE",
      "shaders": "FRAGMENT"
    }
  ],
  "uniforms": [
    {
      "name": "s_LineColors",
      "type": "TEXTURE"
    },
    {
      "name": "s_CasingColors",
      "type": "TEXTURE"
    },
    {
      "name": "s_Widths",
      "type": "TEXTURE"
    },
    {
      "name": "s_DashCoords",
      "type": "TEXTURE"
    },
    {
      "name": "s_DashPatterns",
      "type": "TEXTURE"
    },
    {
      "name": "u_TileMin",
      "type": "VEC3"
    },
    {
      "name": "u_TileMax",
      "type": "VEC3"
    },
    {
      "name": "u_FragClip",
      "type": "VEC4"
    },
    {
      "name": "u_PackedParams",
      "comment": "packed as (z offset, _, _, _)",
      "type": "VEC4"
    },
    {
      "name": "u_Opacity",
      "type": "VEC3",
      "comment": "x and y denote the range over which the opacity gradient is applied. z is an opacity multiplier"
    },
    {
      "name": "u_NearFarFocus",
      "type": "VEC3"
    }
  ]
}