{
  "sortOrder": 18,
  "requirements": {
    "positionOutput": true,
    "normal":  true
  },
  "chunks": [
    {
      "comment": "function to compute the distance stored in the cubemap at the direction from lightSource to pixelPos",
      "TODO": "create the cube map so that we don't have to index it weirdly?",
      "lines": [
        "float cubemapRayTo(vec3 lightSource, vec3 pixelPos)",
        "{",
        "\tvec3 rayDir = pixelPos - lightSource;",
        "\t// multiply y coordinate of cube map index by -1 because south is +y (matches slippy map)",
        "\trayDir.y *= -1.0;",
        "\tfloat dist = textureCube(s_cubeDepth0, rayDir).x * u_viewshedFarPlane0.x;",
        "\treturn dist;",
        "}"
      ],
      "position": "Functions",
      "type": "Pixel"
    },
    {
      "comment": "function to compute the concentric viewshed rings",
      "lines": [
        "vec3 calcViewshedRings(vec3 terrainColor, vec3 viewshedPos, vec3 pixelPos, float range, vec4 tint)",
        "{",
        "\tfloat dist = length(pixelPos - viewshedPos);",
        "\tfloat inRange = float(dist < range);",
        "\t// compute level sets of the distance to the eye (concentric circles on the terrain)",
        "\tfloat lineStrength = levelSets(dist, range / 4.0, 0.0, 0.0, range, 1.5);",
        "\t// add a couple small circles close to the eye",
        "\tlineStrength += levelSets(dist, 0.02, 0.0, 0.0, 0.08, 1.5);",
        "\tvec4 lineColor = vec4(mix(terrainColor, tint.rgb, tint.a), tint.a);",
        "\treturn mix(terrainColor, lineColor.rgb, lineStrength);",
        "}"
      ],
      "position": "Functions",
      "type": "Pixel"
    },
    {
      "lines": [
        "vec3 calcViewshed(vec3 terrainColor, vec3 viewshedPos, vec3 pixelPos, float inverted, float range, vec4 tint)",
        "{",
        "\tfloat dist = length(pixelPos - viewshedPos);",
        "\tfloat biasedDist = dist - u_viewshedBias0.x; // simple depth bias",
        "\tfloat cubemapDist = cubemapRayTo(viewshedPos, pixelPos);",
        "\tfloat inRange = float(dist < range);",
        "\tfloat isVisible = abs(inverted - float(biasedDist < cubemapDist));",
        "\tfloat grey = (terrainColor.r + terrainColor.g + terrainColor.b) / 3.0;",
        "\tvec3 color = grey * tint.rgb;",
        "\t// compute the strength to apply to the the viewshed color",
        "\tfloat strength = inRange * isVisible * tint.a;",
        "\treturn mix(terrainColor, color, strength);",
        "}"
      ],
      "position": "Functions",
      "type": "Pixel"
    },
    {
      "lines": [
        "fragColor.rgb = calcViewshed(fragColor.rgb, u_viewshedPos0.xyz, worldPosition.xyz, u_viewshedInverted0.x, u_viewshedRange0.x, u_viewshedTint0);",
        "fragColor.rgb = calcViewshedRings(fragColor.rgb, u_viewshedPos0.xyz, worldPosition.xyz, u_viewshedRange0.x, u_viewshedRingTint0);"
      ],
      "position": "Lighting",
      "positionOffset": 0,
      "type": "Pixel"
    }
  ],
  "shaderParameters": [
    {
      "componentName": "Viewshed",
      "name": "u_viewshedTint0",
      "type" : "color",
      "color": {
          "r": 0.0,
          "g": 0.8,
          "b": 1.0,
          "a": 1.0
      }
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedRingTint0",
      "type" : "color",
      "color": {
          "r": 1.0,
          "g": 0.2,
          "b": 0.0,
          "a": 1.0
      }
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedRange0",
      "type": "float",
      "float": 10.0
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedPos0",
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      }
    },
    {
      "componentName": "Viewshed",
      "name": "s_cubeDepth0",
      "realtimeUniform": true,
      "type": "cubeSampler",
      "anisoFilter": true
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedFarPlane0",
      "realtimeUniform": true,
      "type": "float",
      "float": 40000.0
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedInverted0",
      "realtimeUniform": true,
      "type": "float",
      "float": 0.0
    },
    {
      "componentName": "Viewshed",
      "name": "u_viewshedBias0",
      "type": "vec3",
      "vec3": {
        "x": 0.05,
        "y": 0.0,
        "z": 0.0
      }
    }
  ]
}