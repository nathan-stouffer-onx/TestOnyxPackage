{
    "sortOrder" : 2,
    "requirements":
    {
        "position": true,
        "positionOutput": true
    },
    "inputs" :
    [
        {
            "alias": "normal",
            "dataType": "vec4"
        },
        {
            "alias": "tangent",
            "dataType": "vec4"
        }
    ],

    "outputs" :
    [
        {
            "alias": "uv",
            "dataType": "vec4"
        }
    ],

    "chunks": [
    {
        "comment" : "#include \"OnyxFunctions.sc\"",
        "position": "Includes",
        "type": "Vertex_and_Pixel",
        "lines":
        [
            "#include <../examples/common/common.sh>",
            "#include \"OnyxFunctions.sc\""
        ]
    },
    {
        "type": "Vertex",
        "position": "Compose",
        "lines": [
            "\t// The patches are laid out on a grid:",
            "\t//",
            "\t//   0   1          2   3          4   5",
            "\t// 0 +---+----------+---+----------+---+",
            "\t//   | A |     B    | C |    D     | E |",
            "\t// 1 +---+----------+---+----------+---+",
            "\t//   |   |                         |   |",
            "\t//   | F |            G            | H |",
            "\t//   |   |                         |   |",
            "\t// 2 +---+----------+---+----------+---+",
            "\t//   | I |     J    | K |    L     | M |",
            "\t// 3 +---+----------+---+----------+---+",


            "\tvec4 grid0 = normal;",
            "\tvec4 grid1 = tangent;",
            "\tfloat x0 = 1.0 - grid0.x - grid0.y - grid0.z - grid0.w - grid1.x; // for x0, all cells will be 0 so we'll get 1.0",
            "\tfloat y0 = 1.0 - grid1.y - grid1.z - grid1.w; // for y0, all cells will be 0 so we'll get 1.0",
            "\tvec2 screenSize = i_screenPosSize.zw;",
            "\tvec2 screenPos = i_screenPosSize.xy;",
            "\tvec2 uvIn = i_uvVpOriAngle.xy;",
            "\tfloat midPatchSizePx = i_offsets0.z - i_offsets0.y;",
            "\tfloat halfWidth = screenSize.x * 0.5f;",
            "\tfloat rotAngle = i_uvVpOriAngle.w;",
            
            "\t// Compute x screen offsets",
            "\tfloat vert0xOfs = -i_offsets0.x;",
            "\tfloat vert2xOfs = floor(halfWidth - (midPatchSizePx * 0.5f));",
            "\tfloat vert3xOfs = floor(vert2xOfs + midPatchSizePx);",
            "\tfloat vert4xOfs = screenSize.x;",
            "\tfloat vert5xOfs = screenSize.x + i_offsets1.x - i_offsets0.w;",
            "\tvec4 vertXOffsets = vec4(vert0xOfs, vert2xOfs, vert3xOfs, vert4xOfs);",
            "\tfloat widthOffset = dot(vec4(x0, grid0.yzw), vertXOffsets) + (grid1.x * vert5xOfs);",
            
            "\t// Compute y screen offsets",
            "\tfloat vert0yOfs = -i_offsets1.y;",
            "\tfloat vert2yOfs = screenSize.y;",
            "\tfloat vert3yOfs = screenSize.y + i_offsets1.w - i_offsets1.z;",
            "\tvec3 vertYOffsets = vec3(vert0yOfs, vert2yOfs, vert3yOfs);",
            "\tfloat heightOffset = dot(vec3(y0, grid1.z, grid1.w), vertYOffsets);",

            "\t// Compute screen position px/normalized",
            "\tfloat xScreenPx = screenPos.x + widthOffset;",
            "\tfloat yScreenPx = screenPos.y + heightOffset;",
            "\tfloat xScreenN = (xScreenPx - (u_screenRes.x * 0.5)) * u_screenRes.z * 2.0;",
            "\tfloat yScreenN = (yScreenPx - (u_screenRes.y * 0.5)) * u_screenRes.w * 2.0;",
            "\tvec3 pos =  vec3(xScreenN, -yScreenN, 0);",
            "\tgl_Position = vec4(pos.xy, 0, 1);",

            "\tmat4 rotMat = getRotMat(vec3(0, 0, 1), rotAngle);",
            "\tvec3 iconDown = mul(rotMat, vec4(0, 1, 0, 0)).xyz;",
            "\tvec3 iconRgt = mul(rotMat, vec4(1, 0, 0, 0)).xyz;",
            "\tif (i_uvVpOriAngle.z != 1.0) {",
                "\t\ticonDown = normalize(mul(u_view, vec4(iconDown, 0)).xyz);",
                "\t\ticonDown.y *= -1.0;",
                "\t\ticonRgt = normalize(mul(u_view, vec4(iconRgt, 0)).xyz);",
                "\t\ticonRgt.y *= -1.0;",
            "\t}",
            "\tvec3 midpoint = 0.5*(screenSize.x * iconRgt + screenSize.y * iconDown);",
            "\tvec3 offset = widthOffset * iconRgt + heightOffset * iconDown;",
            "\tvec2 finalPosScrSp = ((offset - midpoint + vec3(screenPos.xy, 0))).xy + (0.5*screenSize.xy);",
            "\tvec2 finalPosN = (finalPosScrSp - 0.5*u_screenRes.xy) * (2.0 * u_screenRes.zw);",
            "\tgl_Position = vec4(finalPosN.x, -finalPosN.y, 0, 1);",

            "\t// Compute UV offset",
            "\tfloat xofs = (dot(grid0, i_offsets0) + (grid1.x * i_offsets1.x)) * s_spriteTex_Res.z;",
            "\tfloat yofs = (dot(grid1.yzw, i_offsets1.yzw)) * s_spriteTex_Res.w;",
            "\t//vec4 uv = vertXOffsets;",
            "\tvec4 uv = vec4(uvIn.x + xofs, uvIn.y + yofs, xScreenPx, yScreenPx);  // xScreenPx, yScreenPx, xScreenN, yScreenN);"
        ]
    },
    {
        "Comment": "Quad texturing",
        "type": "Pixel",
        "position": "Main",
        "lines": [
            "\t// Get sprite texture color",
            "\tvec4 fragColor = texture2D(s_spriteTex, uv.xy);"
        ]
    },
    {
        "type": "Pixel",
        "position": "Compose",
        "positionOffset": 10,
        "data": "\tgl_FragColor = fragColor;"
    }
],

    "shaderParameters": [
        {
            "componentName": "IconBase",
            "name": "s_spriteTex",
            "realtimeUniform": true,
            "type": "texture"
        },
        {
            "componentName": "IconBase",
            "name": "u_screenRes",
            "realtimeUniform": true,
            "instanced": false,
            "type": "vec4",
            "vec4": {
                "x": 1.0,
                "y": 1.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "componentName": "NinePatch",
            "name": "u_orientToMap",
            "realtimeUniform": true,
            "instanced": false,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "comment": "x is a bool toggle where 0 is orient to viewport and 1 is orient to map"
        },
        {
            "componentName": "NinePatch",
            "name": "u_oriAngle",
            "realtimeUniform": true,
            "instanced": false,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            },
            "comment": "This is in radians"
        },
        {
            "componentName": "IconBase",
            "imguiRate": 0.01,
            "name": "i_offsets0",
            "realtimeUniform": false,
            "instanced": true,
            "type": "vec4",
            "vec4": {
                "x": 1.0,
                "y": 1.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "componentName": "IconBase",
            "name": "i_offsets1",
            "realtimeUniform": false,
            "instanced": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "componentName": "IconBase",
            "name": "i_screenPosSize",
            "realtimeUniform": false,
            "instanced": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "componentName": "IconBase",
            "name": "i_uvVpOriAngle",
            "realtimeUniform": false,
            "instanced": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            },
            "comment1": "XY is the UV coordinate, z is a bool that orients to Viewport plane if true, or orients to map plane if false.",
            "comment2": "W is the CW angle in radians to rotate the icon"
        }
    ]
}
