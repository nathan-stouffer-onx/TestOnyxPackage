{
  "name": "VertHeight",
  "sortOrder": 17,
  "requirements": {
    "position": true,
    "uv0": true,
    "normal": true
  },
  "outputs": [
    {
      "comment": "couldnt use uniform in both vert and frag due to differing precision, so passing it over",
      "alias": "tileDistortion",
      "dataType": "vec4"
    },
    {
      "alias": "scaleOffsetHeight",
      "dataType": "vec4"
    }
  ],
  "chunks": [
    {
      "lines": [
        "#include \"terrain.sc\""
      ],
      "position": "Includes",
      "type": "Vertex_and_Pixel"
    },
    {
      "lines": [
        "\tworldPosition.w = elevationAtVS(texcoords.xy, u_ScaleOffsetHeight, s_heightTexture);",
        "\tfloat z = distort(worldPosition.w, texcoords.xy, u_tileDistortion.xy);",
        "\tworldPosition.z += z;",
        "\tvertexPosition.z += z * u_tileSize.z;",
        "\tvec4 tileDistortion = u_tileDistortion;",
        "\tvec4 scaleOffsetHeight = u_ScaleOffsetHeight;"
      ],
      "position": "Main",
      "positionOffset": 4,
      "type": "Vertex"
    },
    {
      "lines": [
        "// sample elevation in the fragment shader so low detail meshes don't impact elevation precision",
        "// clamping the texcoords to [0, 1] should be unnecessary but (for some unknown reason) it prevents artifacts at tile boundaries when dynamic contours are enabled",
        "worldPosition.w = elevationAtFS(clamp(texcoords.xy, vec2(0.0, 0.0), vec2(1.0, 1.0)), u_ScaleOffsetHeight, s_heightTexture);"
      ],
      "position": "Main",
      "type": "Pixel",
      "positionOffset": -1
    },
    {
      "data": "vec3 normal = normalAt(texcoords.xy, u_tileSize.x, tileDistortion.xy, s_heightTexture, scaleOffsetHeight, s_heightTexture_Res.z);",
      "position": "Main",
      "type": "Pixel",
      "positionOffset": -1,
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    },
    {
      "lines": [
        "vec3 eyeDir = normalize(-worldPosition.xyz);",
        "float camDown = max(0.0, dot( eyeDir, vec3(0,0,1)));",
        "vec3 lightDir = vec3(eyeDir.y * 0.5,-eyeDir.x * 0.5, max(0.7 * (1.0 - camDown), 0.2));",
        "vec3 norm = normal.xyz;",
        "//norm = normalize(vec3(norm.x, norm.y, norm.z * 0.25 + norm.z * 0.75 * max(0, 1.0 - worldPosition.z / 2000.0))); //accentuate normals for shading as we zoom out",
        "float nDotL = dot(norm.xyz, lightDir);",
        "vec3 reflection = normalize(2.0 * norm.xyz * nDotL - lightDir);",
        "float rDotV = min(max(0, dot(reflection, eyeDir)), 1.0);",
        "float strength = u_lightStrengthPow.x;",
        "float power = u_lightStrengthPow.y;",
        "float vertDim = 1.0 - max(0.0, dot(vec3(0,0,1), norm.xyz)); //reduce the strenth as things approach straight vertical",
        "vertDim *= 2.0;",
        "float heightFade = max(0.0, min(1.0, (-worldPosition.z - 5.0) / 100.0)); //fade out the shading as we get close to the terrain and make sure its off completely when closer",
        "gl_FragColor.rgb += pow(rDotV, power) * strength * (vertDim * 0.9 + 0.1) * heightFade;",
        "//the following lines are helpful when debugging to let us see normal/height/raw height easily in app",
        "//vec3 res = gl_FragColor.rgb;",
        "//if(u_lightStrengthPow.z > 0.5) res = norm.xyz * 0.5 + 0.5;",
        "//if(u_lightStrengthPow.z > 1.0) { float z = worldPosition.z - u_tileMin.z; res = vec3(z,z,z);}",
        "//if(u_lightStrengthPow.z > 1.5) res = texture2D(s_heightTexture, texcoords.xy * scaleOffsetHeight.z + scaleOffsetHeight.xy).xyz;",
        "//gl_FragColor.rgb = res;"
      ],
      "position": "Compose",
      "type": "Pixel",
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    }
  ],
  "ints": {},
  "shaderParameters": [
    {
      "name": "s_heightTexture",
      "type": "texture",
      "anisoFilter": true
    },
    {
      "name": "u_tileSize",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 1.0
      }
    },
    {
      "name": "u_tileDistortion",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 0.0
      }
    },
    {
      "name": "u_ScaleOffsetHeight",
      "type": "vec4",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 1.0,
        "w": 1.0
      }
    },
    {
      "name": "u_lightStrengthPow",
      "imguiRate": 0.01,
      "max": 10.0,
      "min": 0.0,
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.15,
        "y": 0.5,
        "z": 0.0
      }
    }
  ]
}