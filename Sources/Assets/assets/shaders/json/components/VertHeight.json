{
  "sortOrder": 17,
  "requirements": {
    "position": true,
    "uv0": true,
    "normal": true
  },  
  "outputs" :
    [
        {
            "comment" : "couldnt use uniform in both vert and frag due to differing precision, so passing it over",
            "alias": "tileDistortion",
            "dataType": "vec4"
        },
        {
          "alias": "scaleOffsetHeight",
          "dataType": "vec4"
        }
    ],
  "chunks": [
    {
      "lines":[
        "// expects uv to be in tile coordinates",
        "float heightAt(vec2 uv, vec4 scaleOffset)",
        "{",
        "\tvec2 scaledUV = scaleOffset.zw * uv + scaleOffset.xy;",
        "\treturn texture2DLod(s_heightTexture, scaledUV, 0).r;",
        "}"
      ],
      "position": "Functions",
      "type": "Vertex"
    },
    {
      "lines":[
        "// for pixel shader -  expects uv to be in tile coordinates",
        "float heightAt(vec2 uv, vec4 scaleOffset)",
        "{",
        "\tvec2 scaledUV = scaleOffset.zw * uv + scaleOffset.xy;",
        "\treturn texture2D(s_heightTexture, scaledUV).r;",
        "}"
      ],
      "position": "Functions",
      "type": "Pixel"
    },
    {
      "lines":[
        "// expects uv to be in tile coordinates",
        "float distortedHeightAt(vec2 uv, vec2 distortion, vec4 scaleOffset)",
        "{",
        "\tfloat z = heightAt(uv, scaleOffset);",
        "\tfloat distort = mix(distortion.x, distortion.y, uv.y);",
        "\treturn z * distort;",
        "}"
      ],
      "position": "Functions",
      "type": "Vertex_and_Pixel"
    },
    {
      "lines":
      [
       "\tfloat z = distortedHeightAt(texcoords.xy, u_tileDistortion.xy, u_ScaleOffsetHeight);",
       "\tworldPosition.zw += vec2(z, heightAt(texcoords.xy, u_ScaleOffsetHeight));",
       "\tvertexPosition.z += z * u_tileSize.z;",
       "\tvec4 tileDistortion = u_tileDistortion;",
       "\tvec4 scaleOffsetHeight = u_ScaleOffsetHeight;"
      ],
      "position": "Main",
      "positionOffset": 4,
      "type": "Vertex"
    },
    {
      "lines": [
        "// expects uv to be in tile coordinates",
        "vec3 normalAt(vec2 uv, vec2 distortion, vec4 scaleOffset)",
        "{",
        "\tvec2 pixelWidth = s_heightTexture_Res.zw;",
        "\tvec2 tileDelta = pixelWidth / scaleOffset.z;",
        "\tvec2 westUV = uv - vec2(tileDelta.x, 0);",
        "\tvec2 eastUV = uv + vec2(tileDelta.x, 0);",
        "\tvec2 northUV = uv - vec2(0, tileDelta.y);",
        "\tvec2 southUV = uv + vec2(0, tileDelta.y);",
        "\tfloat z = distortedHeightAt(uv, distortion, scaleOffset);",
        "\tfloat westZ = distortedHeightAt(westUV, distortion, scaleOffset) - z;",
        "\tfloat eastZ = distortedHeightAt(eastUV, distortion, scaleOffset) - z;",
        "\tfloat northZ = distortedHeightAt(northUV, distortion, scaleOffset) - z;",
        "\tfloat southZ = distortedHeightAt(southUV, distortion, scaleOffset) - z;",
        "\tvec2 worldStep = u_heightTileSize.xy / 256.0;",
        "\tvec3 westDelta = vec3(-worldStep.x, 0, westZ);",
        "\tvec3 eastDelta = vec3(worldStep.x, 0, eastZ);",
        "\tvec3 northDelta = vec3(0, -worldStep.y, northZ);",
        "\tvec3 southDelta = vec3(0, worldStep.y, southZ);",
        "\tvec3 normal = cross(westDelta, northDelta) + cross(northDelta, eastDelta) + cross(eastDelta, southDelta) + cross(southDelta, westDelta);",
        "\treturn normalize(normal);",
        "}"
      ],
      "position": "Functions",
      "type": "Pixel",
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    },
    {
      "data": "normal.xyz = normalAt(texcoords.xy, tileDistortion.xy, scaleOffsetHeight);",
      "position": "Main",
      "type": "Pixel",
      "positionOffset": -1,
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    },
    {
      "data1": "//gl_FragData[0] = vec4(normal.xyz * 0.5 + 0.5, 1.0);",
      "lines": 
      [
        "vec3 eyeDir = normalize(-worldPosition.xyz);",
        "float camDown = max(0.0, dot( eyeDir, vec3(0,0,1)));", 
        "vec3 lightDir = vec3(eyeDir.y * 0.5,-eyeDir.x * 0.5, max(0.7 * (1.0 - camDown), 0.2));",
        "vec3 norm = normal.xyz;",
        "//norm = normalize(vec3(norm.x, norm.y, norm.z * 0.25 + norm.z * 0.75 * max(0, 1.0 - worldPosition.z / 2000.0))); //accentuate normals for shading as we zoom out",
        "float nDotL = dot(norm.xyz, lightDir);",
        "vec3 reflection = normalize(2.0 * norm.xyz * nDotL - lightDir);",
        "float rDotV = min(max(0, dot(reflection, eyeDir)), 1.0);",
        "float strength = u_lightStrengthPow.x;",
        "float power = u_lightStrengthPow.y;",
        "float vertDim = 1.0 - max(0.0, dot(vec3(0,0,1), norm.xyz)); //reduce the strenth as things approach straight vertical",
        "vertDim *= 2.0;",
        "float heightFade = max(0.0, min(1.0, (-worldPosition.z - 5.0) / 100.0)); //fade out the shading as we get close to the terrain and make sure its off completely when closer",
        "gl_FragData[0].xyz += pow(rDotV, power) * strength * (vertDim * 0.9 + 0.1) * heightFade;",

        "//the following lines are helpful when debugging to let us see normal/height/raw height easily in app",
        "//vec3 res = gl_FragData[0].xyz;",
        "//if(u_lightStrengthPow.z > 0.5) res = norm.xyz * 0.5 + 0.5;",
        "//if(u_lightStrengthPow.z > 1.0) { float z = worldPosition.z - u_tileMin.z; res = vec3(z,z,z);}",
        "//if(u_lightStrengthPow.z > 1.5) res = texture2D(s_heightTexture, texcoords.xy * scaleOffsetHeight.z + scaleOffsetHeight.xy).xyz;",
        "//gl_FragData[0].xyz = res;"
      ],
      "position": "Compose",
      "type": "Pixel",
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    }

  ],
  "ints": {},
  "shaderParameters": [
    {
      "componentName": "VertHeight",
      "name": "s_heightTexture",
      "type": "texture",
      "anisoFilter": true
    },
    {
      "componentName": "VertHeight",
      "name": "u_tileSize",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 1.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_tileDistortion",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 0.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_heightTileSize",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 1.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_ScaleOffsetHeight",
      "type": "vec4",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 1.0,
        "w": 1.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_lightStrengthPow",
      "imguiRate": 0.01,
      "max": 10.0,
      "min": 0.0,
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.15,
        "y": 0.5,
        "z": 0.0
      }
    }
  ]
}