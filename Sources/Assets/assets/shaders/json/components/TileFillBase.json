{
    "name": "TileFillBase",
    "sortOrder": 0,
    "bools": {
        "ScreenspacePattern": false
    },
    "inputs": [
        {
            "alias": "tilePosition_style",
            "dataType": "vec4"
        }
    ],
    "outputs": [
        {
            "alias": "worldPosition",
            "dataType": "vec3",
            "swizzle": "xyz"
        },
        {
            "alias": "tilePosition",
            "dataType": "vec4"
        },
        {
            "alias": "depth",
            "dataType": "vec4"
        },
        {
            "alias": "vecColor",
            "dataType": "vec4"
        },
        {
            "alias": "vecPattern",
            "dataType": "vec4"
        },
        {
            "alias": "distFade",
            "dataType": "float"
        }
    ],
    "chunks": [
        {
            "lines": [
                "#include <common.sh>",
                "#include \"layers.sc\""
            ],
            "position": "Includes",
            "type": "Vertex_and_Pixel"
        },
        {
            "comment": "lerp between tileMin and tileMax.  tileMin is (xPos, yPos, skirtSize); tileMax is (xPos, yPos, 1.0)",
            "lines": [
                "\tvec2 tilePos = vec2(tilePosition_style.xy);",
                "\tfloat tileZ = u_tileMin.z;",
                "\tfloat zOffset = u_PackedParams.x;",
                "\tvec3 worldPosition = vec3(mix(u_tileMin.xy, u_tileMax.xy, tilePos), u_tileMin.z);"
            ],
            "position": "Main",
            "type": "Vertex"
        },
        {
            "data": "mat4 viewMat = u_view;",
            "position": "Main",
            "positionOffset": 1,
            "type": "Vertex"
        },
        {
            "comment": "TODO figure out a way to have positionOffset = 0 so other components easily override base shader behavior",
            "lines": [
                "\tworldPosition.z = tileZ + zOffset;",
                "\tfloat distFade = 1.0 - smoothstep(u_TileFillOpacityTransition.x, u_TileFillOpacityTransition.y, length(worldPosition.xyz));",
                "\tfloat biasKm = max(0.010, max((2.0 / 256.0) * (u_tileMax.x - u_tileMin.x), 0.002 * u_NearFarFocus.z));",
                "\tfloat biasScalar = max(0.5, 1.0 - biasKm / length(worldPosition));",
                "\tvec3 biasedPosition = worldPosition * biasScalar;",
                "\tvec4 projected = mul(u_proj, mul(viewMat, vec4(biasedPosition.xyz, 1.0)));",
                "\tvec4 depth = projected;"
            ],
            "position": "Compose",
            "positionOffset": 1,
            "type": "Vertex"
        },
        {
            "lines": [
                "\tvec4 tilePosition = vec4(tilePos, 0.0, 0.0);",
                "\tgl_Position = projected;"
            ],
            "position": "Compose",
            "positionOffset": 10,
            "type": "Vertex"
        },
        {
            "lines": [
                "\tfloat inX = inRange(tilePosition.x, u_TileFragClip.x, u_TileFragClip.z);",
                "\tfloat inY = inRange(tilePosition.y, u_TileFragClip.y, u_TileFragClip.w);",
                "\tif (inX * inY == 0.0)",
                "\t{",
                "\t\tdiscard;",
                "\t}"
            ],
            "position": "Main",
            "type": "Pixel"
        },
        {
            "lines": [
                "\t vec4 vecPattern = texture2DLod(s_vectorPatterns, tilePosition_style.zw, 0);",
                "\t vecPattern.zw = vecPattern.zw * s_patterns_Res.xy;",
                "\t vec4 vecColor = texture2DLod(s_vectorColors, tilePosition_style.zw, 0);"
            ],
            "position": "Main",
            "type": "Vertex"
        },
        {
            "data": "vec4 fragColor = vecColor;",
            "position": "Main",
            "type": "Pixel"
        },
        {
            "lines": [
                "\tvec2 normalized = (depth.xy / depth.w) * 0.5f + 0.5f;",
                "\tvec2 worldUV = worldPosition.xy + u_eyePos.xy;",
                "\tfloat vectorLevel = 20.0 - u_TileFillData.x;",
                "\tworldUV *= 1000.0;",
                "\tworldUV /= pow(2.0, vectorLevel);",
                "\tvec2 uvOffset = vec2(mod(worldUV.x, vecPattern.z), mod(worldUV.y, vecPattern.w)) * s_patterns_Res.zw;",
                "\tvec4 pattern = texture2DLod(s_patterns, vecPattern.xy + uvOffset, 0);",
                "\tfragColor *= pattern;",
                "\tgl_FragData[0] = vec4(fragColor.xyz, fragColor.a * u_PackedParams.y * distFade);",
                "\tgl_FragData[1] = vec4(0, 0, 0, 0);"
            ],
            "position": "Compose",
            "type": "Pixel",
            "conditional": {
                "ifBoolFalse": "ScreenspacePattern"
            }
        },
        {
            "lines": [
                "\tvec2 normalized = (depth.xy / depth.w) * 0.5f + 0.5f;",
                "\tvec2 screenPosition = normalized.xy * u_viewRect.zw;",
                "\tvec2 uvOffset = vec2(mod(screenPosition.x, vecPattern.z), mod(screenPosition.y, vecPattern.w)) * s_patterns_Res.zw;",
                "\tvec4 pattern = texture2DLod(s_patterns, vecPattern.xy + uvOffset, 0);",
                "\tgl_FragData[0] = outColor * pattern;",
                "\tgl_FragData[1] = vec4(0, 0, 0, 0);"
            ],
            "position": "Compose",
            "type": "Pixel",
            "conditional": {
                "ifBoolTrue": "ScreenspacePattern"
            }
        },
        {
            "lines": [
                "\tgl_FragData[0] = fragColor;",
                "\t//scaling from -1,1 to 0,1, but I suspect that may only be needed for opengl?",
                "\tfloat d = ((depth.z / depth.w) * 0.5 + 0.5) * 256.0;",
                "\tfloat r = floor(d);",
                "\td = (d - r) * 256.0;",
                "\tfloat g = floor(d);",
                "\td = (d - g) * 256.0;",
                "\tfloat b = floor(d);",
                "\tgl_FragData[1] = vec4(r / 256.0, g / 256.0, b / 256.0, 1.0);"
            ],
            "position": "Compose",
            "type": "Pixel",
            "conditional": {
                "ifBoolTrue": "worldPosition"
            }
        }
    ],
    "shaderParameters": [
        {
            "name": "s_vectorColors",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "name": "s_vectorPatterns",
            "type": "texture",
            "anisoFilter": false,
            "shaderType": "Vertex"
        },
        {
            "name": "s_patterns",
            "type": "texture",
            "anisoFilter": false,
            "shaderType": "Pixel"
        },
        {
            "comment": "x is the tile level, y/z unused so far",
            "name": "u_TileFillData",
            "realtimeUniform": true,
            "type": "vec3",
            "shaderType": "Vertex_and_Pixel",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_NearFarFocus",
            "realtimeUniform": true,
            "type": "vec3",
            "shaderType": "Vertex_and_Pixel",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_eyePos",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_camRight",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_camForward",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_camUp",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "max": -1.0,
            "min": -1.0,
            "name": "u_time",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMin",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 0.0
            }
        },
        {
            "name": "u_TileFillOpacityTransition",
            "type": "vec2",
            "vec2": {
                "x": 15.0,
                "y": 30.0
            }
        },
        {
            "realtimeUniform": true,
            "name": "u_PackedParams",
            "comment": "packed as (z offset, opacity multiplier, _, _)",
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 1.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMax",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 1.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_TileFragClip",
            "realtimeUniform": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 1.0,
                "w": 1.0
            }
        }
    ]
}
