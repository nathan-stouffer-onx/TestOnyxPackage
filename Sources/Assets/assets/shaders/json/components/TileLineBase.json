{
    "name": "TileLineBase",
    "sortOrder": 0,
    "requirements": {
        "position": false,
        "positionOutput": false,
        "dashed": true
    },
    "bools": {
        "Dashed": true,
        "Position": false,
        "PositionOutput": false,
        "Tangent": false
    },
    "inputs": [
        {
            "alias": "position",
            "dataType": "vec3"
        },
        {
            "alias": "pattern",
            "dataType": "vec2",
            "conditional": {
                "ifBoolTrue": "DashPattern"
            }
        }
    ],
    "outputs": [
        {
            "alias": "worldPosition",
            "dataType": "vec3",
            "swizzle": "xyz",
            "conditional": {
                "ifBoolTrue": "PositionOutput"
            }
        },
        {
            "alias": "tilePosition",
            "dataType": "vec4"
        },
        {
            "alias": "linePosition",
            "dataType": "vec4"
        },
        {
            "alias": "lineColor",
            "dataType": "vec4"
        },
        {
            "alias": "casingColor",
            "dataType": "vec4"
        },
        {
            "alias": "screenPosition",
            "dataType": "vec4"
        },
        {
            "alias": "dashRow",
            "dataType": "float"
        },
        {
            "alias": "texcoords",
            "dataType": "vec4"
        },
        {
            "alias": "jointNormals",
            "dataType": "vec4"
        },
        {
            "alias": "line_dir",
            "dataType": "vec3"
        },
        {
            "alias": "line_side",
            "dataType": "vec3"
        },
        {
            "alias": "line_width",
            "dataType": "vec4"
        },
        {
            "alias": "line_endPointsScreen",
            "dataType": "vec4"
        },
        {
            "alias": "phaseParams",
            "dataType": "vec4"
        },
        {
            "alias": "line_endFlags",
            "dataType": "vec4"
        },
        {
            "alias": "distFade",
            "dataType": "vec4"
        }
    ],
    "chunks": [
        {
            "lines": [
                "#include <common.sh>",
                "#include \"layers.sc\""
            ],
            "position": "Includes",
            "type": "Vertex_and_Pixel"
        },
        {
            "lines": [
                "#include \"derivatives.sc\""
            ],
            "position": "Includes",
            "type": "Pixel"
        },
        {
            "lines": [
                "vec4 toScreenCoords(vec4 projected, vec2 dimensions)",
                "{",
                "\tvec4 screen = projected / projected.w;",
                "\tscreen.xy = screen.xy * 0.5 + 0.5;",
                "\tscreen.xy *= dimensions;",
                "\treturn screen;",
                "}"
            ],
            "position": "Functions",
            "type": "Vertex"
        },
        {
            "lines": [
                "// we assume u and v to be normal vectors",
                "vec2 jointBisector(vec2 u, vec2 v)",
                "{",
                "\tfloat theta = atan2(u.y, u.x);",
                "\tfloat phi = atan2(v.y, v.x);",
                "\tfloat alpha = 0.5 * (theta + phi);",
                "\treturn vec2(cos(alpha), sin(alpha));",
                "}"
            ],
            "position": "Functions",
            "type": "Vertex"
        },
        {
            "lines": [
                "float LineStrength(vec2 p, vec2 a, vec2 b, float w)",
                "{",
                "\tfloat d_max = 0.5 * (w + 1.0); // furthest distance from the line that should have any strength",
                "\tfloat window = 2.0; // number of pixels used to transition from full strength to no strength",
                "\tSegment seg = segment(a, b);",
                "\tfloat d = distanceTo(seg, p); // compute distance from pixel position to line segment",
                "\t// compute strength -- use different functions based on line width",
                "\tfloat s = 1.0;",
                "\tif (w < 1.0) { s = w - max(0.0, d + 0.5 * (w - 1.0)); }",
                "\telse { s = lerpInv(d_max, max(0.0, d_max - window), d); }",
                "\treturn clamp(s, 0.0, 1.0);",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "float DashStrength(float v, vec2 length, float t, float width)",
                "{",
                "\tvec2 pixelWidth = 1.0 / s_DashSampler_Res.xy;",
                "\tv += 0.5 * pixelWidth.y;",
                "\tfloat period = floor(texture2D(s_DashSampler, vec2(0.0, v)).x * (s_DashSampler_Res.x - 1.0) + 0.5);",
                "\tfloat l = mix(length.x, length.y, t);",
                "\tfloat rasterized = l * 256.0 / max(1.0, floor(width));",
                "\tfloat position = mod(rasterized, period);",
                "\tfloat u = (position + 1.0) / s_DashSampler_Res.x;",
                "\tfloat strength = texture2D(s_DashSampler, vec2(u, v)).x;",
                "\treturn strength;",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "float cMaxLineWidth = 64.0; // analogous value in LineStyleAtlas.cpp",
                "vec2 texParams = u_params.zw;",
                "vec4 lineColor = texture2DLod(s_LineColors, texParams, 0);",
                "vec4 casingColor = texture2DLod(s_CasingColors, texParams, 0);",
                "vec4 lineWidth = texture2DLod(s_Widths, texParams, 0) * cMaxLineWidth;",
                "float dashRow = texture2DLod(s_DashCoords, texParams, 0).r;",
                "vec4 phaseParams = vec4(u_params.xy, lineWidth.x, 0);",
                "vec2 p1 = u_p1p2.xy;",
                "vec2 p2 = u_p1p2.zw;"
            ],
            "position": "Main",
            "type": "Vertex"
        },
        {
            "lines": [
                "// declare tile positions and their corresponding z values",
                "vec2 tileP1 = mix(u_tileMin.xy, u_tileMax.xy, p1.xy);",
                "vec2 tileP2 = mix(u_tileMin.xy, u_tileMax.xy, p2.xy);",
                "vec2 prevTP = mix(u_tileMin.xy, u_tileMax.xy, u_PrevNext.xy);",
                "vec2 nextTP = mix(u_tileMin.xy, u_tileMax.xy, u_PrevNext.zw);",
                "float tileZ1 = u_tileMin.z;",
                "float tileZ2 = u_tileMin.z;",
                "float prevZ = u_tileMin.z;",
                "float nextZ = u_tileMin.z;",
                "float z1Offset = u_PackedParams.x;",
                "float z2Offset = u_PackedParams.x;",
                "float prevZOffset = u_PackedParams.x;",
                "float nextZOffset = u_PackedParams.x;",
                "vec2 tilePos = mix(p1, p2, position.y);"
            ],
            "position": "Main",
            "type": "Vertex",
            "positionOffset": 1
        },
        {
            "lines": [
                "vec4 texcoords = vec4(position.xy,0,0);",
                "float lineLengthSoFar = position.z;",
                "float endA = 1.0 - texcoords.y; //uv.y is 0 for this one, so make it 1.0",
                "float endB = texcoords.y; //uv.y is 1 for this one"
            ],
            "position": "Main",
            "type": "Vertex",
            "positionOffset": 1
        },
        {
            "lines": [
                "// convert to screen space and expand the line",
                "vec3 wp1 = vec3(tileP1, tileZ1 + z1Offset);",
                "vec3 wp2 = vec3(tileP2, tileZ2 + z2Offset);",
                "vec3 worldPosition = mix(wp1.xyz, wp2.xyz, position.y); // write to this variable so fog works correctly",
                "vec4 distFade = vec4(1.0 - smoothstep(u_TileLineOpacityTransition.x, u_TileLineOpacityTransition.y, length(worldPosition.xyz)), 0.0, 0.0, 0.0);",
                "vec3 fromEye = normalize(worldPosition);",
                "float biasKm = max(0.020, max((2.0 / 256.0) * (u_tileMax.x - u_tileMin.x), 0.004 * u_NearFarFocus.z));",
                "wp1 *= max(0.5, 1.0 - biasKm / length(wp1));",
                "wp2 *= max(0.5, 1.0 - biasKm / length(wp2));",
                "vec4 screen1 = mul(u_viewProj, vec4(wp1, 1.0));",
                "vec4 screen2 = mul(u_viewProj, vec4(wp2, 1.0));",
                "float origW = mix(screen1.w, screen2.w, position.y);",
                "screen1 = toScreenCoords(screen1, u_viewRect.zw);",
                "screen2 = toScreenCoords(screen2, u_viewRect.zw);",
                "vec4 line_endPointsScreen = vec4(screen1.xy, screen2.xy);",
                "vec4 transformPosition = mix(screen1, screen2, position.y);",
                "vec3 screenPos = transformPosition.xyz / transformPosition.w;",
                "vec2 lineDirection = screen2.xy - screen1.xy;",
                "float lineLength = length(lineDirection);",
                "lineDirection /= lineLength;",
                "vec2 lineSide = normalize(vec2(-lineDirection.y, lineDirection.x));",
                "vec4 line_width = lineWidth;",
                "line_width *= min(1.0, u_NearFarFocus.z / length(worldPosition.xyz)); // scale based on distance",
                "float widthExpansion = 0.5 * (max(line_width.x, line_width.y) + 2.0); // compute expansion factor",
                "screenPos.xy += lineSide * texcoords.x * widthExpansion;",
                "// overlap ends for the pixel miter",
                "vec2 endExpansion = (-lineDirection * endA * widthExpansion + lineDirection * endB * widthExpansion);",
                "screenPos.xy += endExpansion;",
                "// adjust depth because we expand the vertex from it's true location in screen space",
                "float deltaZ = screen2.z - screen1.z;",
                "float depthAdjustment = widthExpansion * deltaZ / lineLength;",
                "screenPos.z -= endA * depthAdjustment;",
                "screenPos.z += endB * depthAdjustment;",
                "// adjust line length because we expand the vertex from it's true location in screen space",
                "float deltaPhase = phaseParams.y - phaseParams.x;",
                "float phaseAdjustment = widthExpansion * deltaPhase / lineLength;",
                "phaseParams.x -= phaseAdjustment;",
                "phaseParams.y += phaseAdjustment;",
                "vec4 line_endFlags = vec4(u_PrevNext.xz,0,0);",
                "vec3 prevPos = vec3(prevTP, prevZ + prevZOffset);",
                "vec3 nextPos = vec3(nextTP, nextZ + nextZOffset);",
                "vec2 screenPrev = toScreenCoords(mul(u_viewProj, vec4(prevPos, 1.0)), u_viewRect.zw).xy;",
                "vec2 screenNext = toScreenCoords(mul(u_viewProj, vec4(nextPos, 1.0)), u_viewRect.zw).xy;",
                "vec2 prevDir = normalize(screenPrev.xy - screen1.xy);",
                "vec2 nextDir = normalize(screenNext.xy - screen2.xy);",
                "if (u_PrevNext.x < -9999.0) prevDir = lineDirection;",
                "if (u_PrevNext.z < -9999.0) nextDir = -lineDirection;",
                "vec2 jointADir = jointBisector(prevDir, lineDirection);",
                "vec2 jointBDir = jointBisector(-lineDirection, nextDir);",
                "// bias the joint normals in opposite directions",
                "vec2 jointANormal = vec2(-jointADir.y, jointADir.x);",
                "vec2 jointBNormal = vec2(jointBDir.y, -jointBDir.x);",
                "// compute similarity between normals and the appropriate line direction",
                "float similarityA = dot(jointANormal, lineDirection);",
                "float similarityB = dot(jointBNormal, -lineDirection);",
                "// calculate if the normals are facing towards the center of the line (with some floating point error), and flip if not",
                "float flipA = sign(similarityA) * float(abs(similarityA) > 0.001);",
                "float flipB = sign(similarityB) * float(abs(similarityB) > 0.001);",
                "// pass over the joint normal vectors for the mitered ends",
                "vec4 jointNormals = vec4(flipA * jointANormal, flipB * jointBNormal);",
                "float end = texcoords.y;",
                "texcoords.y *= lineLength / widthExpansion;",
                "texcoords.y += sign(end - 0.5) * length(endExpansion) / widthExpansion;",
                "texcoords.z = lineLength / widthExpansion;",
                "vec3 line_dir = vec3(lineDirection, 0.0);",
                "vec3 line_side = vec3(lineSide, 0.0);"
            ],
            "position": "Main",
            "type": "Vertex",
            "positionOffset": 4
        },
        {
            "lines": [
                "float lineEdgeOffsetDist = lineWidth.x * 0.5;",
                "vec4 screenPosition = vec4(screenPos.xyz, 1.0);",
                "vec4 linePosition = vec4(position, lineWidth.x);"
            ],
            "position": "Compose",
            "type": "Vertex"
        },
        {
            "lines": [
                "vec4 tilePosition = vec4(tilePos, 0.0, 0.0);",
                "// convert from screen position back to clip space position",
                "vec4 glPos = vec4(screenPos.xyz, 1.0);",
                "glPos.xy *= u_viewTexel.xy;",
                "glPos.xy = glPos.xy * 2.0 - 1.0;",
                "glPos.xyz *= origW;",
                "glPos.w = origW;",
                "gl_Position = glPos;"
            ],
            "position": "Compose",
            "positionOffset": 10,
            "type": "Vertex"
        },
        {
            "lines": [
                "// discard fragments that are outside the tile",
                "float inX = inRange(tilePosition.x, u_TileFragClip.x, u_TileFragClip.z);",
                "float inY = inRange(tilePosition.y, u_TileFragClip.y, u_TileFragClip.w);",
                "if (inX * inY == 0.0) { discard; }"
            ],
            "position": "Main",
            "type": "Pixel"
        },
        {
            "lines": [
                "// clip off the ends of the corners to make the mitered joints",
                "vec2 fromEndA = screenPosition.xy - line_endPointsScreen.xy;",
                "vec2 fromEndB = screenPosition.xy - line_endPointsScreen.zw;",
                "bool clipA = dot(fromEndA, jointNormals.xy) < 0.0;",
                "bool clipB = dot(fromEndB, jointNormals.zw) < 0.0;",
                "bool isEndA = line_endFlags.x > -999999.0;",
                "bool isEndB = line_endFlags.y > -999999.0;",
                "if ((clipA && isEndA) || (clipB && isEndB)) { discard; }"
            ],
            "position": "Main",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "// compute line color",
                "float dashStrength = DashStrength(dashRow, phaseParams.xy, linePosition.y, phaseParams.z);",
                "float strength = LineStrength(screenPosition.xy, line_endPointsScreen.xy, line_endPointsScreen.zw, line_width.x);",
                "lineColor.a *= strength * dashStrength;",
                "// compute line casing",
                "float casingStrength = LineStrength(screenPosition.xy, line_endPointsScreen.xy, line_endPointsScreen.zw, line_width.y);",
                "casingColor.a *= casingStrength;",
                "// compute fragment color",
                "vec4 fragColor = (casingColor.a == 0.0) ? lineColor : vec4(mix(casingColor.rgb, lineColor.rgb, lineColor.a), min(1.0, casingColor.a + lineColor.a));"
            ],
            "position": "Lighting",
            "type": "Pixel"
        },
        {
            "lines": [
                "gl_FragData[0] = vec4(fragColor.rgb, fragColor.a * u_PackedParams.y * distFade.x);",
                "gl_FragData[1] = vec4(0, 0, 0, 0);"
            ],
            "position": "Compose",
            "type": "Pixel"
        },
        {
            "lines": [
                "// scaling from -1,1 to 0,1, but I suspect that may only be needed for opengl?",
                "float d = ((depth.z / depth.w) * 0.5 + 0.5) * 256.0;",
                "float r = floor(d);",
                "d = (d - r) * 256.0;",
                "float g = floor(d);",
                "d = (d - g) * 256.0;",
                "float b = floor(d);",
                "gl_FragData[1] = vec4(r / 256.0, g / 256.0, b / 256.0, 1.0);"
            ],
            "position": "Compose",
            "type": "Pixel",
            "conditional": {
                "ifBoolTrue": "worldPosition"
            }
        }
    ],
    "shaderParameters": [
        {
            "name": "s_LineColors",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "name": "s_CasingColors",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "name": "s_Widths",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "name": "s_DashCoords",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "name": "s_DashSampler",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "max": -1.0,
            "min": -1.0,
            "name": "u_time",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMin",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 0.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMax",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 1.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_TileFragClip",
            "realtimeUniform": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 1.0,
                "w": 1.0
            }
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_p1p2",
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_PrevNext",
            "type": "vec4"
        },
        {
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_params",
            "type": "color",
            "color": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0,
                "a": 1.0
            }
        },
        {
            "realtimeUniform": true,
            "name": "u_PackedParams",
            "comment": "packed as (z offset, opacity multiplier, _, _)",
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 1.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "name": "u_TileLineOpacityTransition",
            "type": "vec2",
            "vec2": {
                "x": 15.0,
                "y": 30.0
            }
        },
        {
            "realtimeUniform": true,
            "name": "u_NearFarFocus",
            "type": "vec3"
        }
    ]
}