{
    "sortOrder": 0,
    "requirements": {
        "position": false,
        "positionOutput": false,
        "dashed": true
    },
    "bools": {
        "Dashed": true,
        "Position": false,
        "PositionOutput": false,
        "Tangent": false
    },
    "inputs": [
        {
            "alias": "position",
            "dataType": "vec3"
        },
        {
            "alias": "pattern",
            "dataType": "vec2",
            "conditional": {
                "ifBoolTrue": "DashPattern"
            }
        }
    ],
    "outputs": [
        {
            "alias": "worldPosition",
            "dataType": "vec3",
            "swizzle": "xyz",
            "conditional": {
                "ifBoolTrue": "PositionOutput"
            }
        },
        {
            "alias": "tilePosition",
            "dataType": "vec4"
        },
        {
            "alias": "linePosition",
            "dataType": "vec4"
        },
        {
            "alias": "color",
            "dataType": "vec4"
        },
        {
            "alias": "screenPosition",
            "dataType": "vec4"
        },
        {
            "alias": "lineCenter",
            "dataType": "vec4"
        },
        {
            "alias": "dashRow",
            "dataType": "float"
        },
        {
            "alias": "texcoords",
            "dataType": "vec4"
        },
        {
            "alias": "jointNormals",
            "dataType": "vec4"
        },
        {
            "alias": "line_dir",
            "dataType": "vec3"
        },
        {
            "alias": "line_side",
            "dataType": "vec3"
        },
        {
            "alias": "line_size",
            "dataType": "vec4"
        },
        {
            "alias": "line_endPointsScreen",
            "dataType": "vec4"
        },
        {
            "alias": "line_lengthTotal",
            "dataType": "vec4"
        },
        {
            "alias": "line_endFlags",
            "dataType": "vec4"
        },
        {
            "alias": "distFade",
            "dataType": "vec4"
        }
    ],
    "chunks": [
        {
            "lines": [
                "#include <common.sh>",
                "#include \"OnyxFunctions.sc\""
            ],
            "position": "Includes",
            "type": "Vertex_and_Pixel"
        },
        {
            "lines": [
                "#include \"OnyxFragFunctions.sc\""
            ],
            "position": "Includes",
            "type": "Pixel"
        },
        {
            "lines": [
                "vec4 toScreenCoords(vec4 projected, vec2 viewTexel)",
                "{",
                "\t vec4 screen = projected / projected.w;",
                "\t screen.xy = screen.xy * 0.5 + 0.5;",
                "\t screen.xy /= viewTexel;",
                "\t return screen;",
                "}"
            ],
            "position": "Functions",
            "type": "Vertex"
        },
        {
            "lines": [
                "\t float cMaxLineWidth = 64.0; // analogous value in LineStyleAtlas.cpp",
                "\t vec2 texParams = u_params.zw;",
                "\t vec4 vecColor = texture2DLod(s_VectorColors, texParams, 0);",
                "\t vec4 lineWidth = texture2DLod(s_VectorWidths, texParams, 0) * cMaxLineWidth;",
                "\t float dashRow = texture2DLod(s_DashCoords, texParams, 0).r;",
                "\t vec4 line_lengthTotal = vec4(u_params.xy,0,0);",
                "\t float p2Cap = u_params.y;",
                "\t vec2 p1 = u_p1p2.xy;",
                "\t vec2 p2 = u_p1p2.zw;"
            ],
            "position": "Main",
            "type": "Vertex"
        },
        {
            "lines": [
                "\t vec2 tileP1 = mix(u_tileMin.xy, u_tileMax.xy, p1.xy);",
                "\t vec2 tileP2 = mix(u_tileMin.xy, u_tileMax.xy, p2.xy);",
                "\t vec2 tilePos = mix(p1, p2, position.y);",
                "\t float tileZ = u_tileMin.z;",
                "vec4 texcoords = vec4(position.xy,0,0);",
                "float lineLengthSoFar = position.z;",
                "position.xyz = vec3(0, position.y, 0); //repacking to match the previous pos/uv setup, but with all data just in pos",
                "vec4 line_size = lineWidth; //override lineWidth here to use debug values for line dimensions",
                "float widthExpansion = max(line_size.x, line_size.y) + line_size.z + line_size.w + 2.0;//x is solid width, y is dash width, zw are outline gap and width params, constant on the end is excess padding so we have room for AA",
                "widthExpansion /= 2.0; //account for x uv being -1 to both side so need to cut width in half to get proper pixel count",
                "float endA = 1.0 - texcoords.y; //uv.y is 0 for this one, so make it 1.0",
                "float endB = texcoords.y; //uv.y is 1 for this one"
            ],
            "position": "Main",
            "type": "Vertex",
            "positionOffset": 1
        },
        {
            "lines": [
                "float tileZ1 = u_tileMin.z;",
                "float z1 = meshHeightAtPlanes(p1, u_MeshResolution.x);",
                "tileZ1 += z1 * u_tileSize.z;",
                "float tileZ2 = u_tileMin.z;",
                "float z2 = meshHeightAtPlanes(p2, u_MeshResolution.x);",
                "tileZ2 += z2 * u_tileSize.z;",
                "vec4 wp1 = vec4(tileP1, tileZ1, 1.0);",
                "vec4 wp2 = vec4(tileP2, tileZ2, 1.0);",
                "// write to this variable so fog works correctly",
                "vec3 worldPosition = mix(wp1.xyz, wp2.xyz, position.y);",
                "vec4 distFade = vec4(1.0 - smoothstep(u_TileLineOpacityTransition.x, u_TileLineOpacityTransition.y, length(worldPosition.xyz) / u_nearFarPlane.y), 0.0, 0.0, 0.0);",
                "vec4 screen1 = mul(u_proj, mul(u_view, wp1));",
                "vec4 screen2 = mul(u_proj, mul(u_view, wp2));",
                "float origW = mix(screen1.w, screen2.w, position.y);",
                "screen1 = toScreenCoords(screen1, u_viewTexel.xy);",
                "screen2 = toScreenCoords(screen2, u_viewTexel.xy);",
                "vec4 line_endPointsScreen = vec4(screen1.xy, screen2.xy);",
                "vec4 transformPosition = mix(screen1, screen2, position.y);",
                "vec3 screenPos = transformPosition.xyz / transformPosition.w;",
                "//float wPos = transformPosition.w / abs(transformPosition.w);",
                "vec2 lineDirection = screen2.xy - screen1.xy;",
                "float lineLength = length(lineDirection);",
                "lineDirection /= lineLength;",
                "vec2 lineSide = normalize(vec2(-lineDirection.y, lineDirection.x));",
                "screenPos.xy += lineSide * texcoords.x * widthExpansion;",
                "//overlap ends for the pixel miter",
                "vec2 endExpansion = (-lineDirection * endA * widthExpansion + lineDirection * endB * widthExpansion);",
                "screenPos.xy += endExpansion;",
                "//move for miters",
                "vec4 line_endFlags = vec4(u_PrevNext.xz,0,0);",
                "vec2 prevTP = mix(u_tileMin.xy, u_tileMax.xy, u_PrevNext.xy);",
                "vec2 nextTP = mix(u_tileMin.xy, u_tileMax.xy, u_PrevNext.zw);",
                "vec3 prevPos = vec3(prevTP, u_tileMin.z + meshHeightAtPlanes(u_PrevNext.xy, u_MeshResolution.x) * u_tileSize.z);",
                "vec3 nextPos = vec3(nextTP, u_tileMin.z + meshHeightAtPlanes(u_PrevNext.zw, u_MeshResolution.x) * u_tileSize.z);",
                "vec2 screenPrev = toScreenCoords(mul(u_proj, mul(u_view, vec4(prevPos,1.0))), u_viewTexel.xy).xy;",
                "vec2 screenNext = toScreenCoords(mul(u_proj, mul(u_view, vec4(nextPos,1.0))), u_viewTexel.xy).xy;",
                "vec2 prevDir = normalize(screenPrev.xy - screen1.xy);",
                "vec2 nextDir = normalize(screenNext.xy - screen2.xy);",
                "if(u_PrevNext.x < -9999.0) prevDir = lineDirection;",
                "if(u_PrevNext.z < -9999.0) nextDir = -lineDirection;",
                "vec2 jointADir = jointBisector(prevDir, lineDirection);",
                "vec2 jointBDir = jointBisector(-lineDirection, nextDir);",
                "// bias the joint normals in opposite directions",
                "vec2 jointANormal = vec2(-jointADir.y, jointADir.x);",
                "vec2 jointBNormal = vec2(jointBDir.y, -jointBDir.x);",
                "// compute similarity between normals and the appropriate line direction",
                "float similarityA = dot(jointANormal, lineDirection);",
                "float similarityB = dot(jointBNormal, -lineDirection);",
                "// calculate if the normals are facing towards the center of the line (with some floating point error), and flip if not",
                "float flipA = sign(similarityA) * float(abs(similarityA) > 0.001);",
                "float flipB = sign(similarityB) * float(abs(similarityB) > 0.001);",
                "// pass over the joint normal vectors for the mitered ends",
                "vec4 jointNormals = vec4(flipA * jointANormal, flipB * jointBNormal);",
                "float end = texcoords.y;",
                "texcoords.y *= lineLength / widthExpansion;",
                "texcoords.y += sign(end - 0.5) * length(endExpansion) / widthExpansion;",
                "texcoords.z = lineLength / widthExpansion;",
                "vec3 line_dir = vec3(lineDirection, 0.0);",
                "vec3 line_side = vec3(lineSide, 0.0);"
            ],
            "position": "Main",
            "type": "Vertex",
            "positionOffset": 4
        },
        {
            "lines": [
                "\t float lineEdgeOffsetDist = lineWidth.x * 0.5;",
                "\t vec4 lineCenter = vec4(1,1,1,1);// vec4(pixelLength * position.y + (lineWidth * 0.5f * position.z), 0.0, 0.0, 0.0);",
                "\t vec4 screenPosition = vec4(screenPos.xyz, 1.0);// vec4(screenPos.xy + screenOffset, screenPos.z, 1.0);",
                "\t vec4 linePosition = vec4(position.x, position.z, 0, lineWidth.x);",
                "\t vec4 color = vecColor;",
                "//\t screenPosition.w = sqrt(dot(u_screenDimensions.xy, u_screenDimensions.xy)) * lineEdgeOffsetDist * 0.5;",
                "\t vec4 dashUV = vec4(position.xyz, 1.0);",
                "\t float zBias = (1.0 / 2500.0) * max(1.0,widthExpansion*2.0) * pow(max(1.0, 1.0 + (u_nearFarPlane.y - u_nearFarPlane.x - 500.0) / 100.0),2.5);",
                "\t screenPosition.z = max(-1.0, screenPosition.z - zBias / origW);"
            ],
            "position": "Compose",
            "type": "Vertex"
        },
        {
            "lines": [
                "\tvec4 tilePosition = vec4(tilePos, 0.0, 0.0);",
                "vec4 glPos = vec4(screenPosition.xyz, 1.0);",
                "glPos.xy *= u_viewTexel.xy;",
                "glPos.xy = glPos.xy * 2.0 - 1.0;",
                "glPos.xyz *= origW;",
                "glPos.w = origW;",
                "\tgl_Position = glPos;"
            ],
            "position": "Compose",
            "positionOffset": 10,
            "type": "Vertex"
        },
        {
            "data": "float repeat(float x) { return abs(fract(x*0.5+0.5)-0.5)*2.0; }",
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "// we assume u and v to be normal vectors",
                "vec2 jointBisector(vec2 u, vec2 v)",
                "{",
                "\tfloat theta = atan2(u.y, u.x);",
                "\tfloat phi = atan2(v.y, v.x);",
                "\tfloat alpha = 0.5 * (theta + phi);",
                "\treturn vec2(cos(alpha), sin(alpha));",
                "}"
            ],
            "position": "Functions",
            "type": "Vertex"
        },
        {
            "lines": [
                "float LineDistField(vec3 uv, vec2 pA, vec2 pB, vec2 thick, float rounded, float dashOn, float time)",
                "{",
                "\t// Don't let it get more round than circular.",
                "\trounded = min(thick.y, rounded);",
                "\t// midpoint",
                "\tvec2 mid = (pB + pA) * 0.5;",
                "\t// vector from point A to B",
                "\tvec2 delta = pB - pA;",
                "\t// Distance between endpoints",
                "\tfloat lenD = length(delta);",
                "\t// unit vector pointing in the line's direction",
                "\tvec2 unit = delta / lenD;",
                "\t// Check for when line endpoints are the same",
                "\tif (lenD < 0.0001) unit = vec2(1.0, 0.0);",
                "\t// Perpendicular vector to unit - also length 1.0",
                "\tvec2 perp = unit.yx * vec2(-1.0, 1.0);",
                "\t// position along line from midpoint",
                "\tfloat dpx = dot(unit, uv.xy - mid);",
                "\t// distance away from line at a right angle",
                "\tfloat dpy = dot(perp, uv.xy - mid);",
                "\t// Make a distance function that is 0 at the transition from black to white",
                "\tfloat disty = abs(dpy) - thick.y + rounded;",
                "\tfloat distx = abs(dpx) - lenD * 0.5 - thick.x + rounded;",
                "\t// Too tired to remember what this does. Something like rounded endpoints for distance function.",
                "\tfloat dist = length(vec2(max(0.0, distx), max(0.0,disty))) - rounded;",
                "\tdist = min(dist, max(distx, disty));",
                "\t// This is for animated dashed lines. Delete if you don't like dashes.",
                "\tfloat dashScale = 2.0*thick.y;",
                "\t// Make a distance function for the dashes",
                "\tfloat dash = (repeat(dpx/dashScale + time)-0.5)*dashScale;",
                "\t// Combine this distance function with the line's.",
                "\tdist = max(dist, dash-(1.0-dashOn*1.0)*10000.0);",
                "\t//distance from endpoint",
                "//need to account for width and endcap size here to scale it so its not stretched",
                "\tfloat distPa = length(pA - uv.xy) - thick.y;",
                "\tfloat distPb = length(pB - uv.xy)- thick.y;",
                "\tfloat endA = max(0.0, -sign(uv.x));",
                "\tfloat endB = max(0.0,sign(uv.x - uv.z));",
                "\tfloat endMask = endA + endB;",
                "\treturn mix(dist, min(distPa, distPb), endMask);",
                "\t//return dist;",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "float smoothStep(float val, float low, float high)",
                "{",
                "\tfloat f = (val - low) / (high - low);",
                "\treturn min(max(f, 0.0), 1.0);",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "// This makes a line in UV units. A 1.0 thick line will span a whole 0..1 in UV space.",
                "float FillLine(vec3 uv, vec2 pA, vec2 pB, vec2 thick, float rounded)",
                "{",
                "\tfloat df = LineDistField(uv, pA, pB, thick, rounded, 0.0, 0.0);",
                "\tfloat dist = df;",
                "\tvec2 ddist = vec2(dFdx(dist), dFdy(dist));",
                "\tfloat pixelDist = dist / length(ddist);",
                "\treturn saturate(-pixelDist);",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "// This makes a line in UV units. A 1.0 thick line will span a whole 0..1 in UV space.",
                "float DashLine(vec3 uv, float dashId, vec2 pA, vec2 pB, vec4 screenEndpoints, vec2 totalLen, vec2 thick)",
                "{",
                "\tfloat dashLenCount = floor(texture2D(s_DashSampler, vec2(0.0, dashId)).x * (s_DashSampler_Res.x - 1.0) + 0.5);",
                "\tfloat worldLineLen = totalLen.y - totalLen.x;",
                "\tfloat screenLineLen = length(screenEndpoints.xy - screenEndpoints.zw);",
                "\tfloat worldToScreenLengthScale = screenLineLen / worldLineLen * 0.5;",
                "\tfloat lengthOffset = totalLen.x * worldToScreenLengthScale +  uv.x * thick.y; //find our position along the dashing",
                "\tlengthOffset /= thick.y; //put in scale of line widths per dash unit",
                "\tfloat dashScale = 0.25; //magic number to fix scaling - may not be needed, converted to zoom controlled, or...?",
                "\tfloat dashPosition = mod(dashScale * lengthOffset , dashLenCount); //tile by the number of dash units we have per pattern ",
                "\tfloat dashUVx = (dashPosition + 1.0) / s_DashSampler_Res.x;",
                "\tfloat dashOnOff = texture2D(s_DashSampler, vec2(dashUVx, dashId)).x;",
                "\tfloat dashDf = LineDistField(uv, pA, pB, thick, 0.0, 0.0, 0.0) * dashOnOff;",
                "\tfloat dist = -dashDf;",
                "\tvec2 ddist = vec2(dFdx(dist), dFdy(dist));",
                "\tfloat pixelDist = dist / length(ddist);",
                "\treturn saturate(pixelDist);",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "// This makes an outlined line in UV units. A 1.0 thick outline will span 0..1 in UV space.",
                "float DrawOutline(vec3 uv, vec2 pA, vec2 pB, vec2 thick, float rounded, float outlineThick)",
                "{",
                "\tfloat df = LineDistField(uv, pA, pB, vec2(thick), rounded, 0.0, 0.0);",
                "\tfloat outlineDf = ((abs(df + outlineThick*0.5) - outlineThick * 0.5));",
                "\tfloat dist = outlineDf;",
                "\tvec2 ddist = vec2(dFdx(dist), dFdy(dist));",
                "\tfloat pixelDist = dist / length(ddist);",
                "\treturn saturate(0.5 - pixelDist) * abs(sign(outlineThick));",
                "//\treturn smoothStep(saturate(-((abs(df + outlineThick*0.5) - outlineThick * 0.5))), 0.0, 0.001);",
                "}"
            ],
            "position": "Functions",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "\tfloat inX = inRange(tilePosition.x, u_TileFragClip.x, u_TileFragClip.z);",
                "\tfloat inY = inRange(tilePosition.y, u_TileFragClip.y, u_TileFragClip.w);",
                "\tif (inX * inY == 0.0)",
                "\t{",
                "\t\tdiscard;",
                "\t}"
            ],
            "position": "Main",
            "type": "Pixel"
        },
        {
            "lines": [
                "\t vec2 d = abs(linePosition.xy);",
                "\t float pos = dot(d, d);",
                "\t float cMaxDashArrayLength = 16.0;",
                "\t vec2 dashPixelWidth = 1.0 / s_DashSampler_Res.xy;",
                "\t float dashV = dashRow + 0.5 * dashPixelWidth.y;"
            ],
            "position": "Main",
            "type": "Pixel"
        },
        {
            "lines": [
                "// clip off the ends of the corners to make the mitered joints",
                "vec2 fromEndA = screenPosition.xy - line_endPointsScreen.xy;",
                "vec2 fromEndB = screenPosition.xy - line_endPointsScreen.zw;",
                "bool clipA = dot(fromEndA, jointNormals.xy) < 0.0; // see which side of the end we're on",
                "bool clipB = dot(fromEndB, jointNormals.zw) < 0.0;",
                "if ((clipA && line_endFlags.x > -9999.0) || (clipB && line_endFlags.y > -9999.0))",
                "\t{",
                "\t\tdiscard;",
                "\t}"
            ],
            "position": "Main",
            "positionOffset": 0,
            "type": "Pixel"
        },
        {
            "lines": [
                "float ends = texcoords.z;",
                "vec3 lineCoords = vec3(texcoords.yx, texcoords.z);",
                "vec2 start = vec2(0,0);",
                "vec2 end = vec2(ends, 0);",
                "float widthExpansion = max(line_size.x, line_size.y) + line_size.z + line_size.w + 2.0;",
                "widthExpansion /= 2.0; //account for x uv being -1 to both side so need to cut width in half to get proper pixel count",
                "float solid = FillLine(lineCoords, start, end, vec2((line_size.x * 0.5) / widthExpansion, (line_size.x * 0.5) / widthExpansion), 0.0);",
                "float solidOuterOutline = DrawOutline(lineCoords, start, end, vec2( ((max(line_size.x, line_size.y) + line_size.z + line_size.w) * 0.5) / widthExpansion, ((max(line_size.x, line_size.y) + line_size.z + line_size.w) * 0.5) / widthExpansion), 0.0, line_size.w * 0.5 / widthExpansion);",
                "float dashLine = DashLine(lineCoords, dashV, start, end, line_endPointsScreen, line_lengthTotal.xy, vec2((line_size.y * 0.5) / widthExpansion,(line_size.y * 0.5) / widthExpansion));",
                "float alpha = min(1.0, max(dashLine + solid + solidOuterOutline,0));",
                "vec4 fragColor = vec4(solid*1.0, -solid*1.0, 0.0,1.0);",
                "//temp variables for color, need to hook up to cpu access",
                "vec4 u_lineOuterOutlineColor = vec4(0,0,1,1);",
                "vec4 dashColor = color.xyzw;//TODO - pass in dash color separate from solid vec4(1,0,0,1);",
                "vec3 solidDashBlend = mix(color.xyz, dashLine * dashColor.xyz, dashLine);",
                "fragColor = vec4(mix(solidDashBlend, u_lineOuterOutlineColor.xyz, solidOuterOutline), alpha);",
                "//float df = LineDistField(lineCoords, start, end, vec2(1.0,1.0), 0.0, 0.0, 0.0);",
                "//fragColor.xyzw = vec4(df, -df,0,1.0);",
                "//fragColor.xyzw = vec4(1.0, 0.0,1.0,1.0);"
            ],
            "position": "Lighting",
            "type": "Pixel"
        },
        {
            "lines": [
                "\tgl_FragData[0] = vec4(fragColor.rgb, fragColor.a * color.a * u_vectorFade.r * distFade.x);",
                "\tgl_FragData[1] = vec4(0, 0, 0, 0);"
            ],
            "position": "Compose",
            "type": "Pixel"
        },
        {
            "lines": [
                "\t//scaling from -1,1 to 0,1, but I suspect that may only be needed for opengl?",
                "\tfloat d = ((depth.z / depth.w) * 0.5 + 0.5) * 256.0;",
                "\tfloat r = floor(d);",
                "\td = (d - r) * 256.0;",
                "\tfloat g = floor(d);",
                "\td = (d - g) * 256.0;",
                "\tfloat b = floor(d);",
                "\tgl_FragData[1] = vec4(r / 256.0, g / 256.0, b / 256.0, 1.0);"
            ],
            "position": "Compose",
            "type": "Pixel",
            "conditional": {
                "ifBoolTrue": "worldPosition"
            }
        }
    ],
    "shaderParameters": [
        {
            "componentName": "TileLineBase",
            "name": "s_VectorColors",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "componentName": "TileLineBase",
            "name": "s_VectorWidths",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "componentName": "TileLineBase",
            "name": "s_DashCoords",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "componentName": "TileLineBase",
            "name": "s_DashSampler",
            "type": "texture",
            "anisoFilter": false
        },
        {
            "componentName": "TileLineBase",
            "max": -1.0,
            "min": -1.0,
            "name": "u_time",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMin",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 0.0
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_tileMax",
            "realtimeUniform": true,
            "type": "vec3",
            "vec3": {
                "x": -10000.0,
                "y": -10000.0,
                "z": 1.0
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "name": "u_TileFragClip",
            "realtimeUniform": true,
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 1.0,
                "w": 1.0
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_p1p2",
            "type": "vec4",
            "vec4": {
                "x": 0.0,
                "y": 0.0,
                "z": 0.0,
                "w": 0.0
            }
        },
        {
            "componentName": "TileLineBase",
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_PrevNext",
            "type": "vec4"
        },
        {
            "comment": ".xy = normalized pixel height/width; zw = screen dimensions in pixels",
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "name": "u_screenDimensions",
            "type": "vec4",
            "vec4": {
                "x": 0.01,
                "y": 0.01,
                "z": 1280,
                "w": 720
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "instanced": true,
            "name": "u_params",
            "type": "color",
            "color": {
                "r": 1.0,
                "g": 1.0,
                "b": 1.0,
                "a": 1.0
            }
        },
        {
            "componentName": "TileLineBase",
            "imguiRate": 0.01,
            "max": -1.0,
            "min": -1.0,
            "realtimeUniform": true,
            "name": "u_vectorFade",
            "type": "float",
            "float": 1.0
        },
        {
            "componentName": "TileLineBase",
            "name": "u_TileLineOpacityTransition",
            "type": "vec2",
            "vec2": {
                "x": 0.4,
                "y": 0.55
            }
        },
        {
            "componentName": "TileLineBase",
            "realtimeUniform": true,
            "name": "u_nearFarPlane",
            "type": "vec3"
        }
    ]
}