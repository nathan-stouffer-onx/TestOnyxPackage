{
  "name": "Billboard",
  "sortOrder": 2,
  "requirements": {
    "position": true,
    "positionOutput": true,
    "normal": true,
    "transformPosition": false
  },
  "bools": {
    "FixedSize": false,
    "NormalAsPivot": true,
    "TextureElevation": false,
    "UniformAsPivot": false
  },
  "ints": {},
  "chunks": [
    {
      "comment": "Texture elevation sampler",
      "conditional": {
        "ifBoolTrue": "TextureElevation"
      },
      "data": "s_bbHeightTexture",
      "position": "Samplers",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "comment": "read texture elevation",
      "conditional": {
        "ifBoolTrue": "TextureElevation"
      },
      "lines": [
        "vec3 texHeight = texture2DLod(s_bbHeightTexture, u_bbHeightUV.xy, 0).xyz;",
        "texHeight *= 255.0; //change 0-1 to 0-255",
        "float height = ((texHeight.x * 256.0 + texHeight.y + texHeight.z / 256.0) - 32768.0) / 1000.0;",
        "vec3 pivot = vec3(a_position.xy, height);"
      ],
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "comment": "Use normal attribute as pivot",
      "conditional": {
        "ifBoolTrue": "NormalAsPivot"
      },
      "data": "vec3 pivot = vec3(a_normal.xyz);",
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
  {
      "comment": "Use uniform variable as pivot",
      "conditional": {
        "ifBoolTrue": "UniformAsPivot"
      },
      "data": "vec3 pivot = vec3(u_pivot.xyz);",
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },

    {
      "data": "vec2 size = u_billboardSize.xy;",
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "comment": "keep size fixed regardless of camera distance",
      "conditional": {
        "ifBoolTrue": "FixedSize"
      },
      "lines": [
        "float sizeCorrection = length(mul(u_view, vec4(pivot, 1.0)).xyz);",
        "size *= sizeCorrection;"
      ],
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "lines": [
        "pivot.z += u_bbOffset.x;",
        "vec2 bbScale = vec2(size.x * (a_position.x - 0.5), size.y * a_position.y); ",
        "vec3 bbPos = pivot + u_camRight.xyz * bbScale.x + u_camUp.xyz * bbScale.y;"
      ],
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "lines": [
          "v_position = bbPos;",
          "gl_Position = mul(u_viewProj, vec4(bbPos, 1.0));"
      ],
      "position": "Compose",
      "positionOffset": 2,
      "type": "Vertex"
    },
    {
      "TODO": "get rid of this block once we store billboarded data in a BSP?",
      "comment": "discard the fragment if it is clear",
      "data": "if (fragColor.w == 0.0) { discard; }",
      "position": "Compose",
      "positionOffset": 0,
      "type": "Pixel"
    }
  ],
  "shaderParameters": [
    {
      "float": 0.0,
      "imguiRate": 0.01,
      "max": -1.0,
      "min": -1.0,
      "name": "u_bbOffset",
      "realtimeUniform": true,
      "type": "float"
    },
    {
      "imguiRate": 0.01,
      "max": -1.0,
      "min": -1.0,
      "name": "u_billboardSize",
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      }
    },
  {
      "imguiRate": 0.01,
      "max": -1.0,
      "min": -1.0,
      "name": "u_pivot",
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      }
    },
    {
      "name": "u_bbHeightUV",
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      },
      "conditional": {
        "ifBoolTrue": "TextureElevation"
      }
    },
    {
      "name": "s_bbHeightTexture",
      "type": "texture",
      "conditional": {
        "ifBoolTrue": "TextureElevation"
      }
    }
  ]
}
