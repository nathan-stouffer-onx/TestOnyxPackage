{
  "sortOrder": 17,
  "requirements": {
    "position": true,
    "uv0": true
  },
  "chunks": [
    {
      "lines":[
        "// expects uv to be in tile coordinates",
        "float heightAt(vec2 uv)",
        "{",
        "\tvec2 scaledUV = u_ScaleOffsetHeight.zw * uv + u_ScaleOffsetHeight.xy;",
        "\treturn texture2DLod(s_heightTextureVert, scaledUV, 0).r;",
        "}"
      ],
      "position": "Functions",
      "type": "Vertex"
    },
    {
      "lines":[
        "// expects uv to be in tile coordinates",
        "float distortedHeightAt(vec2 uv)",
        "{",
        "\tfloat z = heightAt(uv);",
        "\tfloat distortion = mix(u_tileDistortion.x, u_tileDistortion.y, uv.y);",
        "\treturn z * distortion;",
        "}"
      ],
      "position": "Functions",
      "type": "Vertex"
    },
    {
      "lines": [
        "\tvec2 tilePos = clamp(a_position.xy, 0, 1);",
        "\tfloat z = distortedHeightAt(tilePos);",
        "\tworldPosition.zw += vec2(z, heightAt(tilePos));",
        "\tvertexPosition.z += z * u_tileSize.z;"
      ],
      "position": "Main",
      "positionOffset": 4,
      "type": "Vertex"
    },
    {
      "lines": [
        "// expects uv to be in tile coordinates",
        "vec3 normalAt(vec2 uv)",
        "{",
        "\tvec2 pixelWidth = 1.0 / s_heightTextureVert_Res.xy;",
        "\tvec2 tileDelta = pixelWidth / u_ScaleOffsetHeight.z;",
        "\tvec2 westUV = uv - vec2(tileDelta.x, 0);",
        "\tvec2 eastUV = uv + vec2(tileDelta.x, 0);",
        "\tvec2 northUV = uv - vec2(0, tileDelta.y);",
        "\tvec2 southUV = uv + vec2(0, tileDelta.y);",
        "\tfloat z = distortedHeightAt(uv);",
        "\tfloat westZ = distortedHeightAt(westUV) - z;",
        "\tfloat eastZ = distortedHeightAt(eastUV) - z;",
        "\tfloat northZ = distortedHeightAt(northUV) - z;",
        "\tfloat southZ = distortedHeightAt(southUV) - z;",
        "\tvec2 worldStep = u_heightTileSize.xy / 256.0;",
        "\tvec3 westDelta = vec3(-worldStep.x, 0, westZ);",
        "\tvec3 eastDelta = vec3(worldStep.x, 0, eastZ);",
        "\tvec3 northDelta = vec3(0, -worldStep.y, northZ);",
        "\tvec3 southDelta = vec3(0, worldStep.y, southZ);",
        "\tvec3 normal = cross(westDelta, northDelta) + cross(northDelta, eastDelta) + cross(eastDelta, southDelta) + cross(southDelta, westDelta);",
        "\treturn normalize(normal);",
        "}"
      ],
      "position": "Functions",
      "type": "Vertex"
    },
    {
      "data": "normal = normalAt(uv0.xy);",
      "position": "Main",
      "type": "Vertex",
      "conditional": {
        "ifBoolTrue": "Normal"
      }
    },
    {
      "data": "projected.z -= (projected.w * 0.01);",
      "position": "Compose",
      "type": "Vertex",
      "positionOffset": 9
    }

  ],
  "ints": {},
  "shaderParameters": [
    {
      "componentName": "VertHeight",
      "name": "s_heightTextureVert",
      "type": "texture",
      "anisoFilter":  true
    },
    {
      "componentName": "VertHeight",
      "name": "u_tileSize",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 1.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_tileDistortion",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 0.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_ScaleOffsetHeight",
      "type": "vec4",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 1.0,
        "w": 1.0
      }
    },
    {
      "componentName": "VertHeight",
      "name": "u_heightTileSize",
      "type": "vec3",
      "vec3": {
        "x": 1.0,
        "y": 1.0,
        "z": 1.0
      }
    }
  ]
}