{
  "sortOrder": 8,
  "requirements": {
    "position": true,
    "positionOutput": true,
    "normal": true,
    "color0": true,
    "uv0": true
  },
  "bools": {},
  "inputs": [
    {
      "alias" : "line_texcoord",
      "dataType" : "vec4"
    },
    {
      "alias" : "line_color",
      "dataType" : "vec4"
    }
  ],
  "outputs": [
    {
      "alias" : "line_texcoord",
      "dataType" : "vec4"
    },
    {
      "alias" : "line_color",
      "dataType" : "vec4"
    }
  ],  
  "chunks": [
    {
      "comment": "convert data stored in the slot for normal to the actual normal vector TODO remove function buffer contains actual normal",
      "data": "vec3 convertToLineNormal(vec3 dataFromBuffer)\n{\n  vec3 lineNormal = vec3(-dataFromBuffer.y, dataFromBuffer.x, 0.0);\n  lineNormal /= length(lineNormal);\n  return lineNormal;\n}\n",
      "position": "Functions",
      "positionOffset": 0,
      "type": "Vertex_and_Pixel"
    },
    {
      "comment": "offset vertices by the line width in screen space",
      "lines": [
        "vec4 clipPos = mul(u_viewProj, vec4(position.xyz, 1.0));",
        "vec2 pixelDims = 2.0 * (1.0 / u_screenDimensions.xy);",
        "float lineWidth = u_lineWidth.x * length(pixelDims) * clipPos.w;",
        "int zoomLevelDifference = int(u_tileLevel.y) - int(u_tileLevel.x);",
        "lineWidth /= pow(2.0, zoomLevelDifference);",
        "vec3 lineNormal = convertToLineNormal(a_normal.xyz);",
        "vec4 clipNormal = normalize(mul(u_viewProj, vec4(lineNormal, 0.0)));",
        "clipPos.xy += clipNormal.xy * line_texcoord.x * (lineWidth / 2.0);"
      ],
      "position": "Main",
      "positionOffset": 0,
      "type": "Vertex"
    },
    {
      "comment": "set vertex position in clip space (positionOffset = 2 to override base shader gl_Position) -- TODO remove offset once base shader removes offset",
      "data": "gl_Position = clipPos;\n",
      "position": "Compose",
      "positionOffset": 2,
      "type": "Vertex"
    },
    {
      "comment": "function to test if we keep fragment for style (just dashed lines atm)",
      "data": "float lineStyleAlpha(float distAlongLine, float dashLen, float gapLen)\n{\n  float period = dashLen + gapLen;\n  float theta = mod(distAlongLine, period);\n  return float(theta <= dashLen);\n}\n",
      "position": "Functions",
      "positionOffset": 0,
      "type": "Pixel"
    },
    {
      "comment": "perform style tests to see if we keep the fragment colored",
      "data": "float styleAlpha = lineStyleAlpha(line_texcoord.y, u_dashLength.x, u_gapLength.x);\n",
      "position": "Main",
      "positionOffset": 0,
      "type": "Pixel"
    },
    {
      "data": "fragColor = vec4(line_color.xyz, line_color.a * styleAlpha);\n",
      "position": "Main",
      "positionOffset": 0,
      "type": "Pixel"
    }
  ],
  "ints": {},
  "shaderParameters": [
    {
      "componentName": "Line",
      "imguiRate": 0.009999999776482582,
      "max": -1.0,
      "min": -1.0,
      "name": "u_tileLevel",
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      }
    },
    {
      "componentName": "Line",
      "imguiRate": 0.009999999776482582,
      "max": -1.0,
      "min": -1.0,
      "name": "u_screenDimensions",
      "realtimeUniform": true,
      "type": "vec3",
      "vec3": {
        "x": 0.0,
        "y": 0.0,
        "z": 0.0
      }
    },
    {
      "componentName": "Line",
      "float": 0.0,
      "imguiRate": 0.009999999776482582,
      "max": -1.0,
      "min": -1.0,
      "name": "u_lineWidth",
      "realtimeUniform": true,
      "type": "float"
    },
    {
      "componentName": "Line",
      "float": 0.0,
      "imguiRate": 0.009999999776482582,
      "max": -1.0,
      "min": -1.0,
      "name": "u_dashLength",
      "realtimeUniform": true,
      "type": "float"
    },
    {
      "componentName": "Line",
      "float": 0.0,
      "imguiRate": 0.009999999776482582,
      "max": -1.0,
      "min": -1.0,
      "name": "u_gapLength",
      "realtimeUniform": true,
      "type": "float"
    }
  ]
}
