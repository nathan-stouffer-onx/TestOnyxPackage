precision highp int;
precision highp float;
in highp vec4 a_color0;
in highp vec4 a_color1;
in highp vec4 a_color2;
in highp vec3 a_position;
in highp vec4 a_texcoord0;
out highp vec4 v_color0;
out highp vec4 v_color1;
out highp vec4 v_color2;
out highp vec3 v_position;
out highp vec4 v_texcoord0;
uniform highp mat4 u_view;
uniform highp mat4 u_proj;
uniform highp vec4 u_depthModifier;
uniform highp vec4 u_midpoint;
uniform highp vec4 u_scale;
uniform highp vec4 u_quatRotation;
uniform highp vec4 u_translation;
void main ()
{
  highp vec3 position_1;
  highp vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = u_midpoint.xyz;
  highp vec3 x_3;
  x_3 = (u_view * tmpvar_2).xyz;
  position_1 = (sqrt(dot (x_3, x_3)) * a_position);
  position_1 = (u_scale.x * position_1);
  position_1 = (((
    (((u_quatRotation.w * u_quatRotation.w) - ((
      (u_quatRotation.x * u_quatRotation.x)
     + 
      (u_quatRotation.y * u_quatRotation.y)
    ) + (u_quatRotation.z * u_quatRotation.z))) * position_1)
   + 
    ((2.0 * dot (position_1, u_quatRotation.xyz)) * u_quatRotation.xyz)
  ) + (
    (2.0 * u_quatRotation.w)
   * 
    ((u_quatRotation.yzx * position_1.zxy) - (u_quatRotation.zxy * position_1.yzx))
  )) + u_translation.xyz);
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = position_1;
  gl_Position = (u_proj * (u_view * tmpvar_4));
  gl_Position.z = (gl_Position.z - (gl_Position.w * u_depthModifier.x));
  v_color1 = a_color1;
  v_color2 = a_color2;
  v_color0 = a_color0;
  v_texcoord0 = a_texcoord0;
  v_position = position_1;
}

